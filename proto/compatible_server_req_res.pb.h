// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: compatible_server_req_res.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_compatible_5fserver_5freq_5fres_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_compatible_5fserver_5freq_5fres_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_compatible_5fserver_5freq_5fres_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_compatible_5fserver_5freq_5fres_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_compatible_5fserver_5freq_5fres_2eproto;
namespace ProtoContent {
class FeatureResult;
class FeatureResultDefaultTypeInternal;
extern FeatureResultDefaultTypeInternal _FeatureResult_default_instance_;
class GpuRequest;
class GpuRequestDefaultTypeInternal;
extern GpuRequestDefaultTypeInternal _GpuRequest_default_instance_;
class GpuResult;
class GpuResultDefaultTypeInternal;
extern GpuResultDefaultTypeInternal _GpuResult_default_instance_;
class GpuResultDoc;
class GpuResultDocDefaultTypeInternal;
extern GpuResultDocDefaultTypeInternal _GpuResultDoc_default_instance_;
class Keywords;
class KeywordsDefaultTypeInternal;
extern KeywordsDefaultTypeInternal _Keywords_default_instance_;
class NewKeywords;
class NewKeywordsDefaultTypeInternal;
extern NewKeywordsDefaultTypeInternal _NewKeywords_default_instance_;
class QueryFeature;
class QueryFeatureDefaultTypeInternal;
extern QueryFeatureDefaultTypeInternal _QueryFeature_default_instance_;
class Summarys;
class SummarysDefaultTypeInternal;
extern SummarysDefaultTypeInternal _Summarys_default_instance_;
class TitleTerms;
class TitleTermsDefaultTypeInternal;
extern TitleTermsDefaultTypeInternal _TitleTerms_default_instance_;
}  // namespace ProtoContent
PROTOBUF_NAMESPACE_OPEN
template<> ::ProtoContent::FeatureResult* Arena::CreateMaybeMessage<::ProtoContent::FeatureResult>(Arena*);
template<> ::ProtoContent::GpuRequest* Arena::CreateMaybeMessage<::ProtoContent::GpuRequest>(Arena*);
template<> ::ProtoContent::GpuResult* Arena::CreateMaybeMessage<::ProtoContent::GpuResult>(Arena*);
template<> ::ProtoContent::GpuResultDoc* Arena::CreateMaybeMessage<::ProtoContent::GpuResultDoc>(Arena*);
template<> ::ProtoContent::Keywords* Arena::CreateMaybeMessage<::ProtoContent::Keywords>(Arena*);
template<> ::ProtoContent::NewKeywords* Arena::CreateMaybeMessage<::ProtoContent::NewKeywords>(Arena*);
template<> ::ProtoContent::QueryFeature* Arena::CreateMaybeMessage<::ProtoContent::QueryFeature>(Arena*);
template<> ::ProtoContent::Summarys* Arena::CreateMaybeMessage<::ProtoContent::Summarys>(Arena*);
template<> ::ProtoContent::TitleTerms* Arena::CreateMaybeMessage<::ProtoContent::TitleTerms>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ProtoContent {

// ===================================================================

class TitleTerms :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProtoContent.TitleTerms) */ {
 public:
  TitleTerms();
  virtual ~TitleTerms();

  TitleTerms(const TitleTerms& from);
  TitleTerms(TitleTerms&& from) noexcept
    : TitleTerms() {
    *this = ::std::move(from);
  }

  inline TitleTerms& operator=(const TitleTerms& from) {
    CopyFrom(from);
    return *this;
  }
  inline TitleTerms& operator=(TitleTerms&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TitleTerms& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TitleTerms* internal_default_instance() {
    return reinterpret_cast<const TitleTerms*>(
               &_TitleTerms_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(TitleTerms* other);
  friend void swap(TitleTerms& a, TitleTerms& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TitleTerms* New() const final {
    return CreateMaybeMessage<TitleTerms>(nullptr);
  }

  TitleTerms* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TitleTerms>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TitleTerms& from);
  void MergeFrom(const TitleTerms& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TitleTerms* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProtoContent.TitleTerms";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_compatible_5fserver_5freq_5fres_2eproto);
    return ::descriptor_table_compatible_5fserver_5freq_5fres_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 docid = 1;
  int docid_size() const;
  void clear_docid();
  static const int kDocidFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint32 docid(int index) const;
  void set_docid(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_docid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      docid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_docid();

  // repeated bytes words = 2;
  int words_size() const;
  void clear_words();
  static const int kWordsFieldNumber = 2;
  const std::string& words(int index) const;
  std::string* mutable_words(int index);
  void set_words(int index, const std::string& value);
  void set_words(int index, std::string&& value);
  void set_words(int index, const char* value);
  void set_words(int index, const void* value, size_t size);
  std::string* add_words();
  void add_words(const std::string& value);
  void add_words(std::string&& value);
  void add_words(const char* value);
  void add_words(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& words() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_words();

  // @@protoc_insertion_point(class_scope:ProtoContent.TitleTerms)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > docid_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> words_;
  friend struct ::TableStruct_compatible_5fserver_5freq_5fres_2eproto;
};
// -------------------------------------------------------------------

class Keywords :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProtoContent.Keywords) */ {
 public:
  Keywords();
  virtual ~Keywords();

  Keywords(const Keywords& from);
  Keywords(Keywords&& from) noexcept
    : Keywords() {
    *this = ::std::move(from);
  }

  inline Keywords& operator=(const Keywords& from) {
    CopyFrom(from);
    return *this;
  }
  inline Keywords& operator=(Keywords&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Keywords& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Keywords* internal_default_instance() {
    return reinterpret_cast<const Keywords*>(
               &_Keywords_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Keywords* other);
  friend void swap(Keywords& a, Keywords& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Keywords* New() const final {
    return CreateMaybeMessage<Keywords>(nullptr);
  }

  Keywords* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Keywords>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Keywords& from);
  void MergeFrom(const Keywords& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Keywords* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProtoContent.Keywords";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_compatible_5fserver_5freq_5fres_2eproto);
    return ::descriptor_table_compatible_5fserver_5freq_5fres_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 words_1 = 1;
  int words_1_size() const;
  void clear_words_1();
  static const int kWords1FieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint32 words_1(int index) const;
  void set_words_1(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_words_1(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      words_1() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_words_1();

  // repeated uint32 words_2 = 2;
  int words_2_size() const;
  void clear_words_2();
  static const int kWords2FieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::uint32 words_2(int index) const;
  void set_words_2(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_words_2(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      words_2() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_words_2();

  // @@protoc_insertion_point(class_scope:ProtoContent.Keywords)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > words_1_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > words_2_;
  friend struct ::TableStruct_compatible_5fserver_5freq_5fres_2eproto;
};
// -------------------------------------------------------------------

class NewKeywords :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProtoContent.NewKeywords) */ {
 public:
  NewKeywords();
  virtual ~NewKeywords();

  NewKeywords(const NewKeywords& from);
  NewKeywords(NewKeywords&& from) noexcept
    : NewKeywords() {
    *this = ::std::move(from);
  }

  inline NewKeywords& operator=(const NewKeywords& from) {
    CopyFrom(from);
    return *this;
  }
  inline NewKeywords& operator=(NewKeywords&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NewKeywords& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NewKeywords* internal_default_instance() {
    return reinterpret_cast<const NewKeywords*>(
               &_NewKeywords_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(NewKeywords* other);
  friend void swap(NewKeywords& a, NewKeywords& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NewKeywords* New() const final {
    return CreateMaybeMessage<NewKeywords>(nullptr);
  }

  NewKeywords* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NewKeywords>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NewKeywords& from);
  void MergeFrom(const NewKeywords& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NewKeywords* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProtoContent.NewKeywords";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_compatible_5fserver_5freq_5fres_2eproto);
    return ::descriptor_table_compatible_5fserver_5freq_5fres_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes words = 1;
  int words_size() const;
  void clear_words();
  static const int kWordsFieldNumber = 1;
  const std::string& words(int index) const;
  std::string* mutable_words(int index);
  void set_words(int index, const std::string& value);
  void set_words(int index, std::string&& value);
  void set_words(int index, const char* value);
  void set_words(int index, const void* value, size_t size);
  std::string* add_words();
  void add_words(const std::string& value);
  void add_words(std::string&& value);
  void add_words(const char* value);
  void add_words(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& words() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_words();

  // repeated uint32 importance = 2;
  int importance_size() const;
  void clear_importance();
  static const int kImportanceFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::uint32 importance(int index) const;
  void set_importance(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_importance(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      importance() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_importance();

  // repeated uint32 order = 3;
  int order_size() const;
  void clear_order();
  static const int kOrderFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::uint32 order(int index) const;
  void set_order(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_order(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      order() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_order();

  // @@protoc_insertion_point(class_scope:ProtoContent.NewKeywords)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> words_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > importance_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > order_;
  friend struct ::TableStruct_compatible_5fserver_5freq_5fres_2eproto;
};
// -------------------------------------------------------------------

class Summarys :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProtoContent.Summarys) */ {
 public:
  Summarys();
  virtual ~Summarys();

  Summarys(const Summarys& from);
  Summarys(Summarys&& from) noexcept
    : Summarys() {
    *this = ::std::move(from);
  }

  inline Summarys& operator=(const Summarys& from) {
    CopyFrom(from);
    return *this;
  }
  inline Summarys& operator=(Summarys&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Summarys& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Summarys* internal_default_instance() {
    return reinterpret_cast<const Summarys*>(
               &_Summarys_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Summarys* other);
  friend void swap(Summarys& a, Summarys& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Summarys* New() const final {
    return CreateMaybeMessage<Summarys>(nullptr);
  }

  Summarys* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Summarys>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Summarys& from);
  void MergeFrom(const Summarys& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Summarys* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProtoContent.Summarys";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_compatible_5fserver_5freq_5fres_2eproto);
    return ::descriptor_table_compatible_5fserver_5freq_5fres_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes words = 1;
  int words_size() const;
  void clear_words();
  static const int kWordsFieldNumber = 1;
  const std::string& words(int index) const;
  std::string* mutable_words(int index);
  void set_words(int index, const std::string& value);
  void set_words(int index, std::string&& value);
  void set_words(int index, const char* value);
  void set_words(int index, const void* value, size_t size);
  std::string* add_words();
  void add_words(const std::string& value);
  void add_words(std::string&& value);
  void add_words(const char* value);
  void add_words(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& words() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_words();

  // @@protoc_insertion_point(class_scope:ProtoContent.Summarys)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> words_;
  friend struct ::TableStruct_compatible_5fserver_5freq_5fres_2eproto;
};
// -------------------------------------------------------------------

class GpuRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProtoContent.GpuRequest) */ {
 public:
  GpuRequest();
  virtual ~GpuRequest();

  GpuRequest(const GpuRequest& from);
  GpuRequest(GpuRequest&& from) noexcept
    : GpuRequest() {
    *this = ::std::move(from);
  }

  inline GpuRequest& operator=(const GpuRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GpuRequest& operator=(GpuRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GpuRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GpuRequest* internal_default_instance() {
    return reinterpret_cast<const GpuRequest*>(
               &_GpuRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(GpuRequest* other);
  friend void swap(GpuRequest& a, GpuRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GpuRequest* New() const final {
    return CreateMaybeMessage<GpuRequest>(nullptr);
  }

  GpuRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GpuRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GpuRequest& from);
  void MergeFrom(const GpuRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GpuRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProtoContent.GpuRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_compatible_5fserver_5freq_5fres_2eproto);
    return ::descriptor_table_compatible_5fserver_5freq_5fres_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ProtoContent.TitleTerms dnn_words = 2;
  int dnn_words_size() const;
  void clear_dnn_words();
  static const int kDnnWordsFieldNumber = 2;
  ::ProtoContent::TitleTerms* mutable_dnn_words(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProtoContent::TitleTerms >*
      mutable_dnn_words();
  const ::ProtoContent::TitleTerms& dnn_words(int index) const;
  ::ProtoContent::TitleTerms* add_dnn_words();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProtoContent::TitleTerms >&
      dnn_words() const;

  // repeated .ProtoContent.TitleTerms cnn_words = 3;
  int cnn_words_size() const;
  void clear_cnn_words();
  static const int kCnnWordsFieldNumber = 3;
  ::ProtoContent::TitleTerms* mutable_cnn_words(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProtoContent::TitleTerms >*
      mutable_cnn_words();
  const ::ProtoContent::TitleTerms& cnn_words(int index) const;
  ::ProtoContent::TitleTerms* add_cnn_words();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProtoContent::TitleTerms >&
      cnn_words() const;

  // repeated bytes exp_id = 4;
  int exp_id_size() const;
  void clear_exp_id();
  static const int kExpIdFieldNumber = 4;
  const std::string& exp_id(int index) const;
  std::string* mutable_exp_id(int index);
  void set_exp_id(int index, const std::string& value);
  void set_exp_id(int index, std::string&& value);
  void set_exp_id(int index, const char* value);
  void set_exp_id(int index, const void* value, size_t size);
  std::string* add_exp_id();
  void add_exp_id(const std::string& value);
  void add_exp_id(std::string&& value);
  void add_exp_id(const char* value);
  void add_exp_id(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& exp_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_exp_id();

  // repeated string run_graphes = 5;
  int run_graphes_size() const;
  void clear_run_graphes();
  static const int kRunGraphesFieldNumber = 5;
  const std::string& run_graphes(int index) const;
  std::string* mutable_run_graphes(int index);
  void set_run_graphes(int index, const std::string& value);
  void set_run_graphes(int index, std::string&& value);
  void set_run_graphes(int index, const char* value);
  void set_run_graphes(int index, const char* value, size_t size);
  std::string* add_run_graphes();
  void add_run_graphes(const std::string& value);
  void add_run_graphes(std::string&& value);
  void add_run_graphes(const char* value);
  void add_run_graphes(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& run_graphes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_run_graphes();

  // repeated string urls = 6;
  int urls_size() const;
  void clear_urls();
  static const int kUrlsFieldNumber = 6;
  const std::string& urls(int index) const;
  std::string* mutable_urls(int index);
  void set_urls(int index, const std::string& value);
  void set_urls(int index, std::string&& value);
  void set_urls(int index, const char* value);
  void set_urls(int index, const char* value, size_t size);
  std::string* add_urls();
  void add_urls(const std::string& value);
  void add_urls(std::string&& value);
  void add_urls(const char* value);
  void add_urls(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& urls() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_urls();

  // repeated .ProtoContent.Keywords keywords = 7;
  int keywords_size() const;
  void clear_keywords();
  static const int kKeywordsFieldNumber = 7;
  ::ProtoContent::Keywords* mutable_keywords(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProtoContent::Keywords >*
      mutable_keywords();
  const ::ProtoContent::Keywords& keywords(int index) const;
  ::ProtoContent::Keywords* add_keywords();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProtoContent::Keywords >&
      keywords() const;

  // repeated uint64 pc_1 = 8;
  int pc_1_size() const;
  void clear_pc_1();
  static const int kPc1FieldNumber = 8;
  ::PROTOBUF_NAMESPACE_ID::uint64 pc_1(int index) const;
  void set_pc_1(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_pc_1(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      pc_1() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_pc_1();

  // repeated uint64 pc_2 = 9;
  int pc_2_size() const;
  void clear_pc_2();
  static const int kPc2FieldNumber = 9;
  ::PROTOBUF_NAMESPACE_ID::uint64 pc_2(int index) const;
  void set_pc_2(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_pc_2(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      pc_2() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_pc_2();

  // repeated .ProtoContent.NewKeywords newkeywords = 10;
  int newkeywords_size() const;
  void clear_newkeywords();
  static const int kNewkeywordsFieldNumber = 10;
  ::ProtoContent::NewKeywords* mutable_newkeywords(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProtoContent::NewKeywords >*
      mutable_newkeywords();
  const ::ProtoContent::NewKeywords& newkeywords(int index) const;
  ::ProtoContent::NewKeywords* add_newkeywords();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProtoContent::NewKeywords >&
      newkeywords() const;

  // repeated .ProtoContent.Summarys summary = 11;
  int summary_size() const;
  void clear_summary();
  static const int kSummaryFieldNumber = 11;
  ::ProtoContent::Summarys* mutable_summary(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProtoContent::Summarys >*
      mutable_summary();
  const ::ProtoContent::Summarys& summary(int index) const;
  ::ProtoContent::Summarys* add_summary();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProtoContent::Summarys >&
      summary() const;

  // required uint32 request_id = 1;
  bool has_request_id() const;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint32 request_id() const;
  void set_request_id(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:ProtoContent.GpuRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProtoContent::TitleTerms > dnn_words_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProtoContent::TitleTerms > cnn_words_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> exp_id_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> run_graphes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> urls_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProtoContent::Keywords > keywords_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > pc_1_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > pc_2_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProtoContent::NewKeywords > newkeywords_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProtoContent::Summarys > summary_;
  ::PROTOBUF_NAMESPACE_ID::uint32 request_id_;
  friend struct ::TableStruct_compatible_5fserver_5freq_5fres_2eproto;
};
// -------------------------------------------------------------------

class FeatureResult :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProtoContent.FeatureResult) */ {
 public:
  FeatureResult();
  virtual ~FeatureResult();

  FeatureResult(const FeatureResult& from);
  FeatureResult(FeatureResult&& from) noexcept
    : FeatureResult() {
    *this = ::std::move(from);
  }

  inline FeatureResult& operator=(const FeatureResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline FeatureResult& operator=(FeatureResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FeatureResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FeatureResult* internal_default_instance() {
    return reinterpret_cast<const FeatureResult*>(
               &_FeatureResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(FeatureResult* other);
  friend void swap(FeatureResult& a, FeatureResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FeatureResult* New() const final {
    return CreateMaybeMessage<FeatureResult>(nullptr);
  }

  FeatureResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FeatureResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FeatureResult& from);
  void MergeFrom(const FeatureResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FeatureResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProtoContent.FeatureResult";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_compatible_5fserver_5freq_5fres_2eproto);
    return ::descriptor_table_compatible_5fserver_5freq_5fres_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 feature_id = 1;
  bool has_feature_id() const;
  void clear_feature_id();
  static const int kFeatureIdFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint32 feature_id() const;
  void set_feature_id(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // required float feature_score = 2;
  bool has_feature_score() const;
  void clear_feature_score();
  static const int kFeatureScoreFieldNumber = 2;
  float feature_score() const;
  void set_feature_score(float value);

  // @@protoc_insertion_point(class_scope:ProtoContent.FeatureResult)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 feature_id_;
  float feature_score_;
  friend struct ::TableStruct_compatible_5fserver_5freq_5fres_2eproto;
};
// -------------------------------------------------------------------

class QueryFeature :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProtoContent.QueryFeature) */ {
 public:
  QueryFeature();
  virtual ~QueryFeature();

  QueryFeature(const QueryFeature& from);
  QueryFeature(QueryFeature&& from) noexcept
    : QueryFeature() {
    *this = ::std::move(from);
  }

  inline QueryFeature& operator=(const QueryFeature& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryFeature& operator=(QueryFeature&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QueryFeature& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryFeature* internal_default_instance() {
    return reinterpret_cast<const QueryFeature*>(
               &_QueryFeature_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(QueryFeature* other);
  friend void swap(QueryFeature& a, QueryFeature& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QueryFeature* New() const final {
    return CreateMaybeMessage<QueryFeature>(nullptr);
  }

  QueryFeature* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QueryFeature>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QueryFeature& from);
  void MergeFrom(const QueryFeature& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryFeature* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProtoContent.QueryFeature";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_compatible_5fserver_5freq_5fres_2eproto);
    return ::descriptor_table_compatible_5fserver_5freq_5fres_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float feature_score = 2;
  int feature_score_size() const;
  void clear_feature_score();
  static const int kFeatureScoreFieldNumber = 2;
  float feature_score(int index) const;
  void set_feature_score(int index, float value);
  void add_feature_score(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      feature_score() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_feature_score();

  // required uint32 feature_id = 1;
  bool has_feature_id() const;
  void clear_feature_id();
  static const int kFeatureIdFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint32 feature_id() const;
  void set_feature_id(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:ProtoContent.QueryFeature)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > feature_score_;
  ::PROTOBUF_NAMESPACE_ID::uint32 feature_id_;
  friend struct ::TableStruct_compatible_5fserver_5freq_5fres_2eproto;
};
// -------------------------------------------------------------------

class GpuResultDoc :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProtoContent.GpuResultDoc) */ {
 public:
  GpuResultDoc();
  virtual ~GpuResultDoc();

  GpuResultDoc(const GpuResultDoc& from);
  GpuResultDoc(GpuResultDoc&& from) noexcept
    : GpuResultDoc() {
    *this = ::std::move(from);
  }

  inline GpuResultDoc& operator=(const GpuResultDoc& from) {
    CopyFrom(from);
    return *this;
  }
  inline GpuResultDoc& operator=(GpuResultDoc&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GpuResultDoc& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GpuResultDoc* internal_default_instance() {
    return reinterpret_cast<const GpuResultDoc*>(
               &_GpuResultDoc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(GpuResultDoc* other);
  friend void swap(GpuResultDoc& a, GpuResultDoc& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GpuResultDoc* New() const final {
    return CreateMaybeMessage<GpuResultDoc>(nullptr);
  }

  GpuResultDoc* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GpuResultDoc>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GpuResultDoc& from);
  void MergeFrom(const GpuResultDoc& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GpuResultDoc* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProtoContent.GpuResultDoc";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_compatible_5fserver_5freq_5fres_2eproto);
    return ::descriptor_table_compatible_5fserver_5freq_5fres_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 docid = 1;
  int docid_size() const;
  void clear_docid();
  static const int kDocidFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint32 docid(int index) const;
  void set_docid(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_docid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      docid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_docid();

  // repeated .ProtoContent.FeatureResult features = 6;
  int features_size() const;
  void clear_features();
  static const int kFeaturesFieldNumber = 6;
  ::ProtoContent::FeatureResult* mutable_features(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProtoContent::FeatureResult >*
      mutable_features();
  const ::ProtoContent::FeatureResult& features(int index) const;
  ::ProtoContent::FeatureResult* add_features();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProtoContent::FeatureResult >&
      features() const;

  // required float dnn_5000 = 2;
  bool has_dnn_5000() const;
  void clear_dnn_5000();
  static const int kDnn5000FieldNumber = 2;
  float dnn_5000() const;
  void set_dnn_5000(float value);

  // required float dnn_5001 = 3;
  bool has_dnn_5001() const;
  void clear_dnn_5001();
  static const int kDnn5001FieldNumber = 3;
  float dnn_5001() const;
  void set_dnn_5001(float value);

  // required float dnn_5002 = 4;
  bool has_dnn_5002() const;
  void clear_dnn_5002();
  static const int kDnn5002FieldNumber = 4;
  float dnn_5002() const;
  void set_dnn_5002(float value);

  // required float dnn_5003 = 5;
  bool has_dnn_5003() const;
  void clear_dnn_5003();
  static const int kDnn5003FieldNumber = 5;
  float dnn_5003() const;
  void set_dnn_5003(float value);

  // @@protoc_insertion_point(class_scope:ProtoContent.GpuResultDoc)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > docid_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProtoContent::FeatureResult > features_;
  float dnn_5000_;
  float dnn_5001_;
  float dnn_5002_;
  float dnn_5003_;
  friend struct ::TableStruct_compatible_5fserver_5freq_5fres_2eproto;
};
// -------------------------------------------------------------------

class GpuResult :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProtoContent.GpuResult) */ {
 public:
  GpuResult();
  virtual ~GpuResult();

  GpuResult(const GpuResult& from);
  GpuResult(GpuResult&& from) noexcept
    : GpuResult() {
    *this = ::std::move(from);
  }

  inline GpuResult& operator=(const GpuResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline GpuResult& operator=(GpuResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GpuResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GpuResult* internal_default_instance() {
    return reinterpret_cast<const GpuResult*>(
               &_GpuResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(GpuResult* other);
  friend void swap(GpuResult& a, GpuResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GpuResult* New() const final {
    return CreateMaybeMessage<GpuResult>(nullptr);
  }

  GpuResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GpuResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GpuResult& from);
  void MergeFrom(const GpuResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GpuResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProtoContent.GpuResult";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_compatible_5fserver_5freq_5fres_2eproto);
    return ::descriptor_table_compatible_5fserver_5freq_5fres_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ProtoContent.GpuResultDoc doc = 2;
  int doc_size() const;
  void clear_doc();
  static const int kDocFieldNumber = 2;
  ::ProtoContent::GpuResultDoc* mutable_doc(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProtoContent::GpuResultDoc >*
      mutable_doc();
  const ::ProtoContent::GpuResultDoc& doc(int index) const;
  ::ProtoContent::GpuResultDoc* add_doc();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProtoContent::GpuResultDoc >&
      doc() const;

  // repeated .ProtoContent.QueryFeature query_features = 4;
  int query_features_size() const;
  void clear_query_features();
  static const int kQueryFeaturesFieldNumber = 4;
  ::ProtoContent::QueryFeature* mutable_query_features(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProtoContent::QueryFeature >*
      mutable_query_features();
  const ::ProtoContent::QueryFeature& query_features(int index) const;
  ::ProtoContent::QueryFeature* add_query_features();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProtoContent::QueryFeature >&
      query_features() const;

  // required uint32 request_id = 1;
  bool has_request_id() const;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint32 request_id() const;
  void set_request_id(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional int32 dnn_version = 3;
  bool has_dnn_version() const;
  void clear_dnn_version();
  static const int kDnnVersionFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 dnn_version() const;
  void set_dnn_version(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:ProtoContent.GpuResult)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProtoContent::GpuResultDoc > doc_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProtoContent::QueryFeature > query_features_;
  ::PROTOBUF_NAMESPACE_ID::uint32 request_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 dnn_version_;
  friend struct ::TableStruct_compatible_5fserver_5freq_5fres_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TitleTerms

// repeated uint32 docid = 1;
inline int TitleTerms::docid_size() const {
  return docid_.size();
}
inline void TitleTerms::clear_docid() {
  docid_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TitleTerms::docid(int index) const {
  // @@protoc_insertion_point(field_get:ProtoContent.TitleTerms.docid)
  return docid_.Get(index);
}
inline void TitleTerms::set_docid(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  docid_.Set(index, value);
  // @@protoc_insertion_point(field_set:ProtoContent.TitleTerms.docid)
}
inline void TitleTerms::add_docid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  docid_.Add(value);
  // @@protoc_insertion_point(field_add:ProtoContent.TitleTerms.docid)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
TitleTerms::docid() const {
  // @@protoc_insertion_point(field_list:ProtoContent.TitleTerms.docid)
  return docid_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
TitleTerms::mutable_docid() {
  // @@protoc_insertion_point(field_mutable_list:ProtoContent.TitleTerms.docid)
  return &docid_;
}

// repeated bytes words = 2;
inline int TitleTerms::words_size() const {
  return words_.size();
}
inline void TitleTerms::clear_words() {
  words_.Clear();
}
inline const std::string& TitleTerms::words(int index) const {
  // @@protoc_insertion_point(field_get:ProtoContent.TitleTerms.words)
  return words_.Get(index);
}
inline std::string* TitleTerms::mutable_words(int index) {
  // @@protoc_insertion_point(field_mutable:ProtoContent.TitleTerms.words)
  return words_.Mutable(index);
}
inline void TitleTerms::set_words(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:ProtoContent.TitleTerms.words)
  words_.Mutable(index)->assign(value);
}
inline void TitleTerms::set_words(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:ProtoContent.TitleTerms.words)
  words_.Mutable(index)->assign(std::move(value));
}
inline void TitleTerms::set_words(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  words_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ProtoContent.TitleTerms.words)
}
inline void TitleTerms::set_words(int index, const void* value, size_t size) {
  words_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ProtoContent.TitleTerms.words)
}
inline std::string* TitleTerms::add_words() {
  // @@protoc_insertion_point(field_add_mutable:ProtoContent.TitleTerms.words)
  return words_.Add();
}
inline void TitleTerms::add_words(const std::string& value) {
  words_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ProtoContent.TitleTerms.words)
}
inline void TitleTerms::add_words(std::string&& value) {
  words_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ProtoContent.TitleTerms.words)
}
inline void TitleTerms::add_words(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  words_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ProtoContent.TitleTerms.words)
}
inline void TitleTerms::add_words(const void* value, size_t size) {
  words_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ProtoContent.TitleTerms.words)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TitleTerms::words() const {
  // @@protoc_insertion_point(field_list:ProtoContent.TitleTerms.words)
  return words_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TitleTerms::mutable_words() {
  // @@protoc_insertion_point(field_mutable_list:ProtoContent.TitleTerms.words)
  return &words_;
}

// -------------------------------------------------------------------

// Keywords

// repeated uint32 words_1 = 1;
inline int Keywords::words_1_size() const {
  return words_1_.size();
}
inline void Keywords::clear_words_1() {
  words_1_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Keywords::words_1(int index) const {
  // @@protoc_insertion_point(field_get:ProtoContent.Keywords.words_1)
  return words_1_.Get(index);
}
inline void Keywords::set_words_1(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  words_1_.Set(index, value);
  // @@protoc_insertion_point(field_set:ProtoContent.Keywords.words_1)
}
inline void Keywords::add_words_1(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  words_1_.Add(value);
  // @@protoc_insertion_point(field_add:ProtoContent.Keywords.words_1)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Keywords::words_1() const {
  // @@protoc_insertion_point(field_list:ProtoContent.Keywords.words_1)
  return words_1_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Keywords::mutable_words_1() {
  // @@protoc_insertion_point(field_mutable_list:ProtoContent.Keywords.words_1)
  return &words_1_;
}

// repeated uint32 words_2 = 2;
inline int Keywords::words_2_size() const {
  return words_2_.size();
}
inline void Keywords::clear_words_2() {
  words_2_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Keywords::words_2(int index) const {
  // @@protoc_insertion_point(field_get:ProtoContent.Keywords.words_2)
  return words_2_.Get(index);
}
inline void Keywords::set_words_2(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  words_2_.Set(index, value);
  // @@protoc_insertion_point(field_set:ProtoContent.Keywords.words_2)
}
inline void Keywords::add_words_2(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  words_2_.Add(value);
  // @@protoc_insertion_point(field_add:ProtoContent.Keywords.words_2)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Keywords::words_2() const {
  // @@protoc_insertion_point(field_list:ProtoContent.Keywords.words_2)
  return words_2_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Keywords::mutable_words_2() {
  // @@protoc_insertion_point(field_mutable_list:ProtoContent.Keywords.words_2)
  return &words_2_;
}

// -------------------------------------------------------------------

// NewKeywords

// repeated bytes words = 1;
inline int NewKeywords::words_size() const {
  return words_.size();
}
inline void NewKeywords::clear_words() {
  words_.Clear();
}
inline const std::string& NewKeywords::words(int index) const {
  // @@protoc_insertion_point(field_get:ProtoContent.NewKeywords.words)
  return words_.Get(index);
}
inline std::string* NewKeywords::mutable_words(int index) {
  // @@protoc_insertion_point(field_mutable:ProtoContent.NewKeywords.words)
  return words_.Mutable(index);
}
inline void NewKeywords::set_words(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:ProtoContent.NewKeywords.words)
  words_.Mutable(index)->assign(value);
}
inline void NewKeywords::set_words(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:ProtoContent.NewKeywords.words)
  words_.Mutable(index)->assign(std::move(value));
}
inline void NewKeywords::set_words(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  words_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ProtoContent.NewKeywords.words)
}
inline void NewKeywords::set_words(int index, const void* value, size_t size) {
  words_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ProtoContent.NewKeywords.words)
}
inline std::string* NewKeywords::add_words() {
  // @@protoc_insertion_point(field_add_mutable:ProtoContent.NewKeywords.words)
  return words_.Add();
}
inline void NewKeywords::add_words(const std::string& value) {
  words_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ProtoContent.NewKeywords.words)
}
inline void NewKeywords::add_words(std::string&& value) {
  words_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ProtoContent.NewKeywords.words)
}
inline void NewKeywords::add_words(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  words_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ProtoContent.NewKeywords.words)
}
inline void NewKeywords::add_words(const void* value, size_t size) {
  words_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ProtoContent.NewKeywords.words)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
NewKeywords::words() const {
  // @@protoc_insertion_point(field_list:ProtoContent.NewKeywords.words)
  return words_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
NewKeywords::mutable_words() {
  // @@protoc_insertion_point(field_mutable_list:ProtoContent.NewKeywords.words)
  return &words_;
}

// repeated uint32 importance = 2;
inline int NewKeywords::importance_size() const {
  return importance_.size();
}
inline void NewKeywords::clear_importance() {
  importance_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NewKeywords::importance(int index) const {
  // @@protoc_insertion_point(field_get:ProtoContent.NewKeywords.importance)
  return importance_.Get(index);
}
inline void NewKeywords::set_importance(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  importance_.Set(index, value);
  // @@protoc_insertion_point(field_set:ProtoContent.NewKeywords.importance)
}
inline void NewKeywords::add_importance(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  importance_.Add(value);
  // @@protoc_insertion_point(field_add:ProtoContent.NewKeywords.importance)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
NewKeywords::importance() const {
  // @@protoc_insertion_point(field_list:ProtoContent.NewKeywords.importance)
  return importance_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
NewKeywords::mutable_importance() {
  // @@protoc_insertion_point(field_mutable_list:ProtoContent.NewKeywords.importance)
  return &importance_;
}

// repeated uint32 order = 3;
inline int NewKeywords::order_size() const {
  return order_.size();
}
inline void NewKeywords::clear_order() {
  order_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NewKeywords::order(int index) const {
  // @@protoc_insertion_point(field_get:ProtoContent.NewKeywords.order)
  return order_.Get(index);
}
inline void NewKeywords::set_order(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  order_.Set(index, value);
  // @@protoc_insertion_point(field_set:ProtoContent.NewKeywords.order)
}
inline void NewKeywords::add_order(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  order_.Add(value);
  // @@protoc_insertion_point(field_add:ProtoContent.NewKeywords.order)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
NewKeywords::order() const {
  // @@protoc_insertion_point(field_list:ProtoContent.NewKeywords.order)
  return order_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
NewKeywords::mutable_order() {
  // @@protoc_insertion_point(field_mutable_list:ProtoContent.NewKeywords.order)
  return &order_;
}

// -------------------------------------------------------------------

// Summarys

// repeated bytes words = 1;
inline int Summarys::words_size() const {
  return words_.size();
}
inline void Summarys::clear_words() {
  words_.Clear();
}
inline const std::string& Summarys::words(int index) const {
  // @@protoc_insertion_point(field_get:ProtoContent.Summarys.words)
  return words_.Get(index);
}
inline std::string* Summarys::mutable_words(int index) {
  // @@protoc_insertion_point(field_mutable:ProtoContent.Summarys.words)
  return words_.Mutable(index);
}
inline void Summarys::set_words(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:ProtoContent.Summarys.words)
  words_.Mutable(index)->assign(value);
}
inline void Summarys::set_words(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:ProtoContent.Summarys.words)
  words_.Mutable(index)->assign(std::move(value));
}
inline void Summarys::set_words(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  words_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ProtoContent.Summarys.words)
}
inline void Summarys::set_words(int index, const void* value, size_t size) {
  words_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ProtoContent.Summarys.words)
}
inline std::string* Summarys::add_words() {
  // @@protoc_insertion_point(field_add_mutable:ProtoContent.Summarys.words)
  return words_.Add();
}
inline void Summarys::add_words(const std::string& value) {
  words_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ProtoContent.Summarys.words)
}
inline void Summarys::add_words(std::string&& value) {
  words_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ProtoContent.Summarys.words)
}
inline void Summarys::add_words(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  words_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ProtoContent.Summarys.words)
}
inline void Summarys::add_words(const void* value, size_t size) {
  words_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ProtoContent.Summarys.words)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Summarys::words() const {
  // @@protoc_insertion_point(field_list:ProtoContent.Summarys.words)
  return words_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Summarys::mutable_words() {
  // @@protoc_insertion_point(field_mutable_list:ProtoContent.Summarys.words)
  return &words_;
}

// -------------------------------------------------------------------

// GpuRequest

// required uint32 request_id = 1;
inline bool GpuRequest::has_request_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GpuRequest::clear_request_id() {
  request_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GpuRequest::request_id() const {
  // @@protoc_insertion_point(field_get:ProtoContent.GpuRequest.request_id)
  return request_id_;
}
inline void GpuRequest::set_request_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  request_id_ = value;
  // @@protoc_insertion_point(field_set:ProtoContent.GpuRequest.request_id)
}

// repeated .ProtoContent.TitleTerms dnn_words = 2;
inline int GpuRequest::dnn_words_size() const {
  return dnn_words_.size();
}
inline void GpuRequest::clear_dnn_words() {
  dnn_words_.Clear();
}
inline ::ProtoContent::TitleTerms* GpuRequest::mutable_dnn_words(int index) {
  // @@protoc_insertion_point(field_mutable:ProtoContent.GpuRequest.dnn_words)
  return dnn_words_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProtoContent::TitleTerms >*
GpuRequest::mutable_dnn_words() {
  // @@protoc_insertion_point(field_mutable_list:ProtoContent.GpuRequest.dnn_words)
  return &dnn_words_;
}
inline const ::ProtoContent::TitleTerms& GpuRequest::dnn_words(int index) const {
  // @@protoc_insertion_point(field_get:ProtoContent.GpuRequest.dnn_words)
  return dnn_words_.Get(index);
}
inline ::ProtoContent::TitleTerms* GpuRequest::add_dnn_words() {
  // @@protoc_insertion_point(field_add:ProtoContent.GpuRequest.dnn_words)
  return dnn_words_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProtoContent::TitleTerms >&
GpuRequest::dnn_words() const {
  // @@protoc_insertion_point(field_list:ProtoContent.GpuRequest.dnn_words)
  return dnn_words_;
}

// repeated .ProtoContent.TitleTerms cnn_words = 3;
inline int GpuRequest::cnn_words_size() const {
  return cnn_words_.size();
}
inline void GpuRequest::clear_cnn_words() {
  cnn_words_.Clear();
}
inline ::ProtoContent::TitleTerms* GpuRequest::mutable_cnn_words(int index) {
  // @@protoc_insertion_point(field_mutable:ProtoContent.GpuRequest.cnn_words)
  return cnn_words_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProtoContent::TitleTerms >*
GpuRequest::mutable_cnn_words() {
  // @@protoc_insertion_point(field_mutable_list:ProtoContent.GpuRequest.cnn_words)
  return &cnn_words_;
}
inline const ::ProtoContent::TitleTerms& GpuRequest::cnn_words(int index) const {
  // @@protoc_insertion_point(field_get:ProtoContent.GpuRequest.cnn_words)
  return cnn_words_.Get(index);
}
inline ::ProtoContent::TitleTerms* GpuRequest::add_cnn_words() {
  // @@protoc_insertion_point(field_add:ProtoContent.GpuRequest.cnn_words)
  return cnn_words_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProtoContent::TitleTerms >&
GpuRequest::cnn_words() const {
  // @@protoc_insertion_point(field_list:ProtoContent.GpuRequest.cnn_words)
  return cnn_words_;
}

// repeated bytes exp_id = 4;
inline int GpuRequest::exp_id_size() const {
  return exp_id_.size();
}
inline void GpuRequest::clear_exp_id() {
  exp_id_.Clear();
}
inline const std::string& GpuRequest::exp_id(int index) const {
  // @@protoc_insertion_point(field_get:ProtoContent.GpuRequest.exp_id)
  return exp_id_.Get(index);
}
inline std::string* GpuRequest::mutable_exp_id(int index) {
  // @@protoc_insertion_point(field_mutable:ProtoContent.GpuRequest.exp_id)
  return exp_id_.Mutable(index);
}
inline void GpuRequest::set_exp_id(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:ProtoContent.GpuRequest.exp_id)
  exp_id_.Mutable(index)->assign(value);
}
inline void GpuRequest::set_exp_id(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:ProtoContent.GpuRequest.exp_id)
  exp_id_.Mutable(index)->assign(std::move(value));
}
inline void GpuRequest::set_exp_id(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  exp_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ProtoContent.GpuRequest.exp_id)
}
inline void GpuRequest::set_exp_id(int index, const void* value, size_t size) {
  exp_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ProtoContent.GpuRequest.exp_id)
}
inline std::string* GpuRequest::add_exp_id() {
  // @@protoc_insertion_point(field_add_mutable:ProtoContent.GpuRequest.exp_id)
  return exp_id_.Add();
}
inline void GpuRequest::add_exp_id(const std::string& value) {
  exp_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ProtoContent.GpuRequest.exp_id)
}
inline void GpuRequest::add_exp_id(std::string&& value) {
  exp_id_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ProtoContent.GpuRequest.exp_id)
}
inline void GpuRequest::add_exp_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  exp_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ProtoContent.GpuRequest.exp_id)
}
inline void GpuRequest::add_exp_id(const void* value, size_t size) {
  exp_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ProtoContent.GpuRequest.exp_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GpuRequest::exp_id() const {
  // @@protoc_insertion_point(field_list:ProtoContent.GpuRequest.exp_id)
  return exp_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GpuRequest::mutable_exp_id() {
  // @@protoc_insertion_point(field_mutable_list:ProtoContent.GpuRequest.exp_id)
  return &exp_id_;
}

// repeated string run_graphes = 5;
inline int GpuRequest::run_graphes_size() const {
  return run_graphes_.size();
}
inline void GpuRequest::clear_run_graphes() {
  run_graphes_.Clear();
}
inline const std::string& GpuRequest::run_graphes(int index) const {
  // @@protoc_insertion_point(field_get:ProtoContent.GpuRequest.run_graphes)
  return run_graphes_.Get(index);
}
inline std::string* GpuRequest::mutable_run_graphes(int index) {
  // @@protoc_insertion_point(field_mutable:ProtoContent.GpuRequest.run_graphes)
  return run_graphes_.Mutable(index);
}
inline void GpuRequest::set_run_graphes(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:ProtoContent.GpuRequest.run_graphes)
  run_graphes_.Mutable(index)->assign(value);
}
inline void GpuRequest::set_run_graphes(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:ProtoContent.GpuRequest.run_graphes)
  run_graphes_.Mutable(index)->assign(std::move(value));
}
inline void GpuRequest::set_run_graphes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  run_graphes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ProtoContent.GpuRequest.run_graphes)
}
inline void GpuRequest::set_run_graphes(int index, const char* value, size_t size) {
  run_graphes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ProtoContent.GpuRequest.run_graphes)
}
inline std::string* GpuRequest::add_run_graphes() {
  // @@protoc_insertion_point(field_add_mutable:ProtoContent.GpuRequest.run_graphes)
  return run_graphes_.Add();
}
inline void GpuRequest::add_run_graphes(const std::string& value) {
  run_graphes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ProtoContent.GpuRequest.run_graphes)
}
inline void GpuRequest::add_run_graphes(std::string&& value) {
  run_graphes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ProtoContent.GpuRequest.run_graphes)
}
inline void GpuRequest::add_run_graphes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  run_graphes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ProtoContent.GpuRequest.run_graphes)
}
inline void GpuRequest::add_run_graphes(const char* value, size_t size) {
  run_graphes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ProtoContent.GpuRequest.run_graphes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GpuRequest::run_graphes() const {
  // @@protoc_insertion_point(field_list:ProtoContent.GpuRequest.run_graphes)
  return run_graphes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GpuRequest::mutable_run_graphes() {
  // @@protoc_insertion_point(field_mutable_list:ProtoContent.GpuRequest.run_graphes)
  return &run_graphes_;
}

// repeated string urls = 6;
inline int GpuRequest::urls_size() const {
  return urls_.size();
}
inline void GpuRequest::clear_urls() {
  urls_.Clear();
}
inline const std::string& GpuRequest::urls(int index) const {
  // @@protoc_insertion_point(field_get:ProtoContent.GpuRequest.urls)
  return urls_.Get(index);
}
inline std::string* GpuRequest::mutable_urls(int index) {
  // @@protoc_insertion_point(field_mutable:ProtoContent.GpuRequest.urls)
  return urls_.Mutable(index);
}
inline void GpuRequest::set_urls(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:ProtoContent.GpuRequest.urls)
  urls_.Mutable(index)->assign(value);
}
inline void GpuRequest::set_urls(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:ProtoContent.GpuRequest.urls)
  urls_.Mutable(index)->assign(std::move(value));
}
inline void GpuRequest::set_urls(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  urls_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ProtoContent.GpuRequest.urls)
}
inline void GpuRequest::set_urls(int index, const char* value, size_t size) {
  urls_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ProtoContent.GpuRequest.urls)
}
inline std::string* GpuRequest::add_urls() {
  // @@protoc_insertion_point(field_add_mutable:ProtoContent.GpuRequest.urls)
  return urls_.Add();
}
inline void GpuRequest::add_urls(const std::string& value) {
  urls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ProtoContent.GpuRequest.urls)
}
inline void GpuRequest::add_urls(std::string&& value) {
  urls_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ProtoContent.GpuRequest.urls)
}
inline void GpuRequest::add_urls(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  urls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ProtoContent.GpuRequest.urls)
}
inline void GpuRequest::add_urls(const char* value, size_t size) {
  urls_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ProtoContent.GpuRequest.urls)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GpuRequest::urls() const {
  // @@protoc_insertion_point(field_list:ProtoContent.GpuRequest.urls)
  return urls_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GpuRequest::mutable_urls() {
  // @@protoc_insertion_point(field_mutable_list:ProtoContent.GpuRequest.urls)
  return &urls_;
}

// repeated .ProtoContent.Keywords keywords = 7;
inline int GpuRequest::keywords_size() const {
  return keywords_.size();
}
inline void GpuRequest::clear_keywords() {
  keywords_.Clear();
}
inline ::ProtoContent::Keywords* GpuRequest::mutable_keywords(int index) {
  // @@protoc_insertion_point(field_mutable:ProtoContent.GpuRequest.keywords)
  return keywords_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProtoContent::Keywords >*
GpuRequest::mutable_keywords() {
  // @@protoc_insertion_point(field_mutable_list:ProtoContent.GpuRequest.keywords)
  return &keywords_;
}
inline const ::ProtoContent::Keywords& GpuRequest::keywords(int index) const {
  // @@protoc_insertion_point(field_get:ProtoContent.GpuRequest.keywords)
  return keywords_.Get(index);
}
inline ::ProtoContent::Keywords* GpuRequest::add_keywords() {
  // @@protoc_insertion_point(field_add:ProtoContent.GpuRequest.keywords)
  return keywords_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProtoContent::Keywords >&
GpuRequest::keywords() const {
  // @@protoc_insertion_point(field_list:ProtoContent.GpuRequest.keywords)
  return keywords_;
}

// repeated uint64 pc_1 = 8;
inline int GpuRequest::pc_1_size() const {
  return pc_1_.size();
}
inline void GpuRequest::clear_pc_1() {
  pc_1_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GpuRequest::pc_1(int index) const {
  // @@protoc_insertion_point(field_get:ProtoContent.GpuRequest.pc_1)
  return pc_1_.Get(index);
}
inline void GpuRequest::set_pc_1(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  pc_1_.Set(index, value);
  // @@protoc_insertion_point(field_set:ProtoContent.GpuRequest.pc_1)
}
inline void GpuRequest::add_pc_1(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  pc_1_.Add(value);
  // @@protoc_insertion_point(field_add:ProtoContent.GpuRequest.pc_1)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
GpuRequest::pc_1() const {
  // @@protoc_insertion_point(field_list:ProtoContent.GpuRequest.pc_1)
  return pc_1_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
GpuRequest::mutable_pc_1() {
  // @@protoc_insertion_point(field_mutable_list:ProtoContent.GpuRequest.pc_1)
  return &pc_1_;
}

// repeated uint64 pc_2 = 9;
inline int GpuRequest::pc_2_size() const {
  return pc_2_.size();
}
inline void GpuRequest::clear_pc_2() {
  pc_2_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GpuRequest::pc_2(int index) const {
  // @@protoc_insertion_point(field_get:ProtoContent.GpuRequest.pc_2)
  return pc_2_.Get(index);
}
inline void GpuRequest::set_pc_2(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  pc_2_.Set(index, value);
  // @@protoc_insertion_point(field_set:ProtoContent.GpuRequest.pc_2)
}
inline void GpuRequest::add_pc_2(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  pc_2_.Add(value);
  // @@protoc_insertion_point(field_add:ProtoContent.GpuRequest.pc_2)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
GpuRequest::pc_2() const {
  // @@protoc_insertion_point(field_list:ProtoContent.GpuRequest.pc_2)
  return pc_2_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
GpuRequest::mutable_pc_2() {
  // @@protoc_insertion_point(field_mutable_list:ProtoContent.GpuRequest.pc_2)
  return &pc_2_;
}

// repeated .ProtoContent.NewKeywords newkeywords = 10;
inline int GpuRequest::newkeywords_size() const {
  return newkeywords_.size();
}
inline void GpuRequest::clear_newkeywords() {
  newkeywords_.Clear();
}
inline ::ProtoContent::NewKeywords* GpuRequest::mutable_newkeywords(int index) {
  // @@protoc_insertion_point(field_mutable:ProtoContent.GpuRequest.newkeywords)
  return newkeywords_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProtoContent::NewKeywords >*
GpuRequest::mutable_newkeywords() {
  // @@protoc_insertion_point(field_mutable_list:ProtoContent.GpuRequest.newkeywords)
  return &newkeywords_;
}
inline const ::ProtoContent::NewKeywords& GpuRequest::newkeywords(int index) const {
  // @@protoc_insertion_point(field_get:ProtoContent.GpuRequest.newkeywords)
  return newkeywords_.Get(index);
}
inline ::ProtoContent::NewKeywords* GpuRequest::add_newkeywords() {
  // @@protoc_insertion_point(field_add:ProtoContent.GpuRequest.newkeywords)
  return newkeywords_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProtoContent::NewKeywords >&
GpuRequest::newkeywords() const {
  // @@protoc_insertion_point(field_list:ProtoContent.GpuRequest.newkeywords)
  return newkeywords_;
}

// repeated .ProtoContent.Summarys summary = 11;
inline int GpuRequest::summary_size() const {
  return summary_.size();
}
inline void GpuRequest::clear_summary() {
  summary_.Clear();
}
inline ::ProtoContent::Summarys* GpuRequest::mutable_summary(int index) {
  // @@protoc_insertion_point(field_mutable:ProtoContent.GpuRequest.summary)
  return summary_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProtoContent::Summarys >*
GpuRequest::mutable_summary() {
  // @@protoc_insertion_point(field_mutable_list:ProtoContent.GpuRequest.summary)
  return &summary_;
}
inline const ::ProtoContent::Summarys& GpuRequest::summary(int index) const {
  // @@protoc_insertion_point(field_get:ProtoContent.GpuRequest.summary)
  return summary_.Get(index);
}
inline ::ProtoContent::Summarys* GpuRequest::add_summary() {
  // @@protoc_insertion_point(field_add:ProtoContent.GpuRequest.summary)
  return summary_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProtoContent::Summarys >&
GpuRequest::summary() const {
  // @@protoc_insertion_point(field_list:ProtoContent.GpuRequest.summary)
  return summary_;
}

// -------------------------------------------------------------------

// FeatureResult

// required uint32 feature_id = 1;
inline bool FeatureResult::has_feature_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FeatureResult::clear_feature_id() {
  feature_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FeatureResult::feature_id() const {
  // @@protoc_insertion_point(field_get:ProtoContent.FeatureResult.feature_id)
  return feature_id_;
}
inline void FeatureResult::set_feature_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  feature_id_ = value;
  // @@protoc_insertion_point(field_set:ProtoContent.FeatureResult.feature_id)
}

// required float feature_score = 2;
inline bool FeatureResult::has_feature_score() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FeatureResult::clear_feature_score() {
  feature_score_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float FeatureResult::feature_score() const {
  // @@protoc_insertion_point(field_get:ProtoContent.FeatureResult.feature_score)
  return feature_score_;
}
inline void FeatureResult::set_feature_score(float value) {
  _has_bits_[0] |= 0x00000002u;
  feature_score_ = value;
  // @@protoc_insertion_point(field_set:ProtoContent.FeatureResult.feature_score)
}

// -------------------------------------------------------------------

// QueryFeature

// required uint32 feature_id = 1;
inline bool QueryFeature::has_feature_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QueryFeature::clear_feature_id() {
  feature_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 QueryFeature::feature_id() const {
  // @@protoc_insertion_point(field_get:ProtoContent.QueryFeature.feature_id)
  return feature_id_;
}
inline void QueryFeature::set_feature_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  feature_id_ = value;
  // @@protoc_insertion_point(field_set:ProtoContent.QueryFeature.feature_id)
}

// repeated float feature_score = 2;
inline int QueryFeature::feature_score_size() const {
  return feature_score_.size();
}
inline void QueryFeature::clear_feature_score() {
  feature_score_.Clear();
}
inline float QueryFeature::feature_score(int index) const {
  // @@protoc_insertion_point(field_get:ProtoContent.QueryFeature.feature_score)
  return feature_score_.Get(index);
}
inline void QueryFeature::set_feature_score(int index, float value) {
  feature_score_.Set(index, value);
  // @@protoc_insertion_point(field_set:ProtoContent.QueryFeature.feature_score)
}
inline void QueryFeature::add_feature_score(float value) {
  feature_score_.Add(value);
  // @@protoc_insertion_point(field_add:ProtoContent.QueryFeature.feature_score)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
QueryFeature::feature_score() const {
  // @@protoc_insertion_point(field_list:ProtoContent.QueryFeature.feature_score)
  return feature_score_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
QueryFeature::mutable_feature_score() {
  // @@protoc_insertion_point(field_mutable_list:ProtoContent.QueryFeature.feature_score)
  return &feature_score_;
}

// -------------------------------------------------------------------

// GpuResultDoc

// repeated uint32 docid = 1;
inline int GpuResultDoc::docid_size() const {
  return docid_.size();
}
inline void GpuResultDoc::clear_docid() {
  docid_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GpuResultDoc::docid(int index) const {
  // @@protoc_insertion_point(field_get:ProtoContent.GpuResultDoc.docid)
  return docid_.Get(index);
}
inline void GpuResultDoc::set_docid(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  docid_.Set(index, value);
  // @@protoc_insertion_point(field_set:ProtoContent.GpuResultDoc.docid)
}
inline void GpuResultDoc::add_docid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  docid_.Add(value);
  // @@protoc_insertion_point(field_add:ProtoContent.GpuResultDoc.docid)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
GpuResultDoc::docid() const {
  // @@protoc_insertion_point(field_list:ProtoContent.GpuResultDoc.docid)
  return docid_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
GpuResultDoc::mutable_docid() {
  // @@protoc_insertion_point(field_mutable_list:ProtoContent.GpuResultDoc.docid)
  return &docid_;
}

// required float dnn_5000 = 2;
inline bool GpuResultDoc::has_dnn_5000() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GpuResultDoc::clear_dnn_5000() {
  dnn_5000_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float GpuResultDoc::dnn_5000() const {
  // @@protoc_insertion_point(field_get:ProtoContent.GpuResultDoc.dnn_5000)
  return dnn_5000_;
}
inline void GpuResultDoc::set_dnn_5000(float value) {
  _has_bits_[0] |= 0x00000001u;
  dnn_5000_ = value;
  // @@protoc_insertion_point(field_set:ProtoContent.GpuResultDoc.dnn_5000)
}

// required float dnn_5001 = 3;
inline bool GpuResultDoc::has_dnn_5001() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GpuResultDoc::clear_dnn_5001() {
  dnn_5001_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float GpuResultDoc::dnn_5001() const {
  // @@protoc_insertion_point(field_get:ProtoContent.GpuResultDoc.dnn_5001)
  return dnn_5001_;
}
inline void GpuResultDoc::set_dnn_5001(float value) {
  _has_bits_[0] |= 0x00000002u;
  dnn_5001_ = value;
  // @@protoc_insertion_point(field_set:ProtoContent.GpuResultDoc.dnn_5001)
}

// required float dnn_5002 = 4;
inline bool GpuResultDoc::has_dnn_5002() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GpuResultDoc::clear_dnn_5002() {
  dnn_5002_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float GpuResultDoc::dnn_5002() const {
  // @@protoc_insertion_point(field_get:ProtoContent.GpuResultDoc.dnn_5002)
  return dnn_5002_;
}
inline void GpuResultDoc::set_dnn_5002(float value) {
  _has_bits_[0] |= 0x00000004u;
  dnn_5002_ = value;
  // @@protoc_insertion_point(field_set:ProtoContent.GpuResultDoc.dnn_5002)
}

// required float dnn_5003 = 5;
inline bool GpuResultDoc::has_dnn_5003() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GpuResultDoc::clear_dnn_5003() {
  dnn_5003_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float GpuResultDoc::dnn_5003() const {
  // @@protoc_insertion_point(field_get:ProtoContent.GpuResultDoc.dnn_5003)
  return dnn_5003_;
}
inline void GpuResultDoc::set_dnn_5003(float value) {
  _has_bits_[0] |= 0x00000008u;
  dnn_5003_ = value;
  // @@protoc_insertion_point(field_set:ProtoContent.GpuResultDoc.dnn_5003)
}

// repeated .ProtoContent.FeatureResult features = 6;
inline int GpuResultDoc::features_size() const {
  return features_.size();
}
inline void GpuResultDoc::clear_features() {
  features_.Clear();
}
inline ::ProtoContent::FeatureResult* GpuResultDoc::mutable_features(int index) {
  // @@protoc_insertion_point(field_mutable:ProtoContent.GpuResultDoc.features)
  return features_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProtoContent::FeatureResult >*
GpuResultDoc::mutable_features() {
  // @@protoc_insertion_point(field_mutable_list:ProtoContent.GpuResultDoc.features)
  return &features_;
}
inline const ::ProtoContent::FeatureResult& GpuResultDoc::features(int index) const {
  // @@protoc_insertion_point(field_get:ProtoContent.GpuResultDoc.features)
  return features_.Get(index);
}
inline ::ProtoContent::FeatureResult* GpuResultDoc::add_features() {
  // @@protoc_insertion_point(field_add:ProtoContent.GpuResultDoc.features)
  return features_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProtoContent::FeatureResult >&
GpuResultDoc::features() const {
  // @@protoc_insertion_point(field_list:ProtoContent.GpuResultDoc.features)
  return features_;
}

// -------------------------------------------------------------------

// GpuResult

// required uint32 request_id = 1;
inline bool GpuResult::has_request_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GpuResult::clear_request_id() {
  request_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GpuResult::request_id() const {
  // @@protoc_insertion_point(field_get:ProtoContent.GpuResult.request_id)
  return request_id_;
}
inline void GpuResult::set_request_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  request_id_ = value;
  // @@protoc_insertion_point(field_set:ProtoContent.GpuResult.request_id)
}

// repeated .ProtoContent.GpuResultDoc doc = 2;
inline int GpuResult::doc_size() const {
  return doc_.size();
}
inline void GpuResult::clear_doc() {
  doc_.Clear();
}
inline ::ProtoContent::GpuResultDoc* GpuResult::mutable_doc(int index) {
  // @@protoc_insertion_point(field_mutable:ProtoContent.GpuResult.doc)
  return doc_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProtoContent::GpuResultDoc >*
GpuResult::mutable_doc() {
  // @@protoc_insertion_point(field_mutable_list:ProtoContent.GpuResult.doc)
  return &doc_;
}
inline const ::ProtoContent::GpuResultDoc& GpuResult::doc(int index) const {
  // @@protoc_insertion_point(field_get:ProtoContent.GpuResult.doc)
  return doc_.Get(index);
}
inline ::ProtoContent::GpuResultDoc* GpuResult::add_doc() {
  // @@protoc_insertion_point(field_add:ProtoContent.GpuResult.doc)
  return doc_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProtoContent::GpuResultDoc >&
GpuResult::doc() const {
  // @@protoc_insertion_point(field_list:ProtoContent.GpuResult.doc)
  return doc_;
}

// optional int32 dnn_version = 3;
inline bool GpuResult::has_dnn_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GpuResult::clear_dnn_version() {
  dnn_version_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GpuResult::dnn_version() const {
  // @@protoc_insertion_point(field_get:ProtoContent.GpuResult.dnn_version)
  return dnn_version_;
}
inline void GpuResult::set_dnn_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  dnn_version_ = value;
  // @@protoc_insertion_point(field_set:ProtoContent.GpuResult.dnn_version)
}

// repeated .ProtoContent.QueryFeature query_features = 4;
inline int GpuResult::query_features_size() const {
  return query_features_.size();
}
inline void GpuResult::clear_query_features() {
  query_features_.Clear();
}
inline ::ProtoContent::QueryFeature* GpuResult::mutable_query_features(int index) {
  // @@protoc_insertion_point(field_mutable:ProtoContent.GpuResult.query_features)
  return query_features_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProtoContent::QueryFeature >*
GpuResult::mutable_query_features() {
  // @@protoc_insertion_point(field_mutable_list:ProtoContent.GpuResult.query_features)
  return &query_features_;
}
inline const ::ProtoContent::QueryFeature& GpuResult::query_features(int index) const {
  // @@protoc_insertion_point(field_get:ProtoContent.GpuResult.query_features)
  return query_features_.Get(index);
}
inline ::ProtoContent::QueryFeature* GpuResult::add_query_features() {
  // @@protoc_insertion_point(field_add:ProtoContent.GpuResult.query_features)
  return query_features_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProtoContent::QueryFeature >&
GpuResult::query_features() const {
  // @@protoc_insertion_point(field_list:ProtoContent.GpuResult.query_features)
  return query_features_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoContent

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_compatible_5fserver_5freq_5fres_2eproto
