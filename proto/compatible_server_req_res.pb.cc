// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: compatible_server_req_res.proto

#include "compatible_server_req_res.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_compatible_5fserver_5freq_5fres_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FeatureResult_compatible_5fserver_5freq_5fres_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_compatible_5fserver_5freq_5fres_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GpuResultDoc_compatible_5fserver_5freq_5fres_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_compatible_5fserver_5freq_5fres_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Keywords_compatible_5fserver_5freq_5fres_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_compatible_5fserver_5freq_5fres_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NewKeywords_compatible_5fserver_5freq_5fres_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_compatible_5fserver_5freq_5fres_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_QueryFeature_compatible_5fserver_5freq_5fres_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_compatible_5fserver_5freq_5fres_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Summarys_compatible_5fserver_5freq_5fres_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_compatible_5fserver_5freq_5fres_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TitleTerms_compatible_5fserver_5freq_5fres_2eproto;
namespace ProtoContent {
class TitleTermsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TitleTerms> _instance;
} _TitleTerms_default_instance_;
class KeywordsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Keywords> _instance;
} _Keywords_default_instance_;
class NewKeywordsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NewKeywords> _instance;
} _NewKeywords_default_instance_;
class SummarysDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Summarys> _instance;
} _Summarys_default_instance_;
class GpuRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GpuRequest> _instance;
} _GpuRequest_default_instance_;
class FeatureResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FeatureResult> _instance;
} _FeatureResult_default_instance_;
class QueryFeatureDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QueryFeature> _instance;
} _QueryFeature_default_instance_;
class GpuResultDocDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GpuResultDoc> _instance;
} _GpuResultDoc_default_instance_;
class GpuResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GpuResult> _instance;
} _GpuResult_default_instance_;
}  // namespace ProtoContent
static void InitDefaultsscc_info_FeatureResult_compatible_5fserver_5freq_5fres_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ProtoContent::_FeatureResult_default_instance_;
    new (ptr) ::ProtoContent::FeatureResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ProtoContent::FeatureResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FeatureResult_compatible_5fserver_5freq_5fres_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_FeatureResult_compatible_5fserver_5freq_5fres_2eproto}, {}};

static void InitDefaultsscc_info_GpuRequest_compatible_5fserver_5freq_5fres_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ProtoContent::_GpuRequest_default_instance_;
    new (ptr) ::ProtoContent::GpuRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ProtoContent::GpuRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_GpuRequest_compatible_5fserver_5freq_5fres_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsscc_info_GpuRequest_compatible_5fserver_5freq_5fres_2eproto}, {
      &scc_info_TitleTerms_compatible_5fserver_5freq_5fres_2eproto.base,
      &scc_info_Keywords_compatible_5fserver_5freq_5fres_2eproto.base,
      &scc_info_NewKeywords_compatible_5fserver_5freq_5fres_2eproto.base,
      &scc_info_Summarys_compatible_5fserver_5freq_5fres_2eproto.base,}};

static void InitDefaultsscc_info_GpuResult_compatible_5fserver_5freq_5fres_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ProtoContent::_GpuResult_default_instance_;
    new (ptr) ::ProtoContent::GpuResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ProtoContent::GpuResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GpuResult_compatible_5fserver_5freq_5fres_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_GpuResult_compatible_5fserver_5freq_5fres_2eproto}, {
      &scc_info_GpuResultDoc_compatible_5fserver_5freq_5fres_2eproto.base,
      &scc_info_QueryFeature_compatible_5fserver_5freq_5fres_2eproto.base,}};

static void InitDefaultsscc_info_GpuResultDoc_compatible_5fserver_5freq_5fres_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ProtoContent::_GpuResultDoc_default_instance_;
    new (ptr) ::ProtoContent::GpuResultDoc();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ProtoContent::GpuResultDoc::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GpuResultDoc_compatible_5fserver_5freq_5fres_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_GpuResultDoc_compatible_5fserver_5freq_5fres_2eproto}, {
      &scc_info_FeatureResult_compatible_5fserver_5freq_5fres_2eproto.base,}};

static void InitDefaultsscc_info_Keywords_compatible_5fserver_5freq_5fres_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ProtoContent::_Keywords_default_instance_;
    new (ptr) ::ProtoContent::Keywords();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ProtoContent::Keywords::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Keywords_compatible_5fserver_5freq_5fres_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Keywords_compatible_5fserver_5freq_5fres_2eproto}, {}};

static void InitDefaultsscc_info_NewKeywords_compatible_5fserver_5freq_5fres_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ProtoContent::_NewKeywords_default_instance_;
    new (ptr) ::ProtoContent::NewKeywords();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ProtoContent::NewKeywords::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NewKeywords_compatible_5fserver_5freq_5fres_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_NewKeywords_compatible_5fserver_5freq_5fres_2eproto}, {}};

static void InitDefaultsscc_info_QueryFeature_compatible_5fserver_5freq_5fres_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ProtoContent::_QueryFeature_default_instance_;
    new (ptr) ::ProtoContent::QueryFeature();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ProtoContent::QueryFeature::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_QueryFeature_compatible_5fserver_5freq_5fres_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_QueryFeature_compatible_5fserver_5freq_5fres_2eproto}, {}};

static void InitDefaultsscc_info_Summarys_compatible_5fserver_5freq_5fres_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ProtoContent::_Summarys_default_instance_;
    new (ptr) ::ProtoContent::Summarys();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ProtoContent::Summarys::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Summarys_compatible_5fserver_5freq_5fres_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Summarys_compatible_5fserver_5freq_5fres_2eproto}, {}};

static void InitDefaultsscc_info_TitleTerms_compatible_5fserver_5freq_5fres_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ProtoContent::_TitleTerms_default_instance_;
    new (ptr) ::ProtoContent::TitleTerms();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ProtoContent::TitleTerms::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TitleTerms_compatible_5fserver_5freq_5fres_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TitleTerms_compatible_5fserver_5freq_5fres_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_compatible_5fserver_5freq_5fres_2eproto[9];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_compatible_5fserver_5freq_5fres_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_compatible_5fserver_5freq_5fres_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_compatible_5fserver_5freq_5fres_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::ProtoContent::TitleTerms, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ProtoContent::TitleTerms, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProtoContent::TitleTerms, docid_),
  PROTOBUF_FIELD_OFFSET(::ProtoContent::TitleTerms, words_),
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::ProtoContent::Keywords, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ProtoContent::Keywords, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProtoContent::Keywords, words_1_),
  PROTOBUF_FIELD_OFFSET(::ProtoContent::Keywords, words_2_),
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::ProtoContent::NewKeywords, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ProtoContent::NewKeywords, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProtoContent::NewKeywords, words_),
  PROTOBUF_FIELD_OFFSET(::ProtoContent::NewKeywords, importance_),
  PROTOBUF_FIELD_OFFSET(::ProtoContent::NewKeywords, order_),
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::ProtoContent::Summarys, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ProtoContent::Summarys, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProtoContent::Summarys, words_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::ProtoContent::GpuRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ProtoContent::GpuRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProtoContent::GpuRequest, request_id_),
  PROTOBUF_FIELD_OFFSET(::ProtoContent::GpuRequest, dnn_words_),
  PROTOBUF_FIELD_OFFSET(::ProtoContent::GpuRequest, cnn_words_),
  PROTOBUF_FIELD_OFFSET(::ProtoContent::GpuRequest, exp_id_),
  PROTOBUF_FIELD_OFFSET(::ProtoContent::GpuRequest, run_graphes_),
  PROTOBUF_FIELD_OFFSET(::ProtoContent::GpuRequest, urls_),
  PROTOBUF_FIELD_OFFSET(::ProtoContent::GpuRequest, keywords_),
  PROTOBUF_FIELD_OFFSET(::ProtoContent::GpuRequest, pc_1_),
  PROTOBUF_FIELD_OFFSET(::ProtoContent::GpuRequest, pc_2_),
  PROTOBUF_FIELD_OFFSET(::ProtoContent::GpuRequest, newkeywords_),
  PROTOBUF_FIELD_OFFSET(::ProtoContent::GpuRequest, summary_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::ProtoContent::FeatureResult, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ProtoContent::FeatureResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProtoContent::FeatureResult, feature_id_),
  PROTOBUF_FIELD_OFFSET(::ProtoContent::FeatureResult, feature_score_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ProtoContent::QueryFeature, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ProtoContent::QueryFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProtoContent::QueryFeature, feature_id_),
  PROTOBUF_FIELD_OFFSET(::ProtoContent::QueryFeature, feature_score_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::ProtoContent::GpuResultDoc, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ProtoContent::GpuResultDoc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProtoContent::GpuResultDoc, docid_),
  PROTOBUF_FIELD_OFFSET(::ProtoContent::GpuResultDoc, dnn_5000_),
  PROTOBUF_FIELD_OFFSET(::ProtoContent::GpuResultDoc, dnn_5001_),
  PROTOBUF_FIELD_OFFSET(::ProtoContent::GpuResultDoc, dnn_5002_),
  PROTOBUF_FIELD_OFFSET(::ProtoContent::GpuResultDoc, dnn_5003_),
  PROTOBUF_FIELD_OFFSET(::ProtoContent::GpuResultDoc, features_),
  ~0u,
  0,
  1,
  2,
  3,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::ProtoContent::GpuResult, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ProtoContent::GpuResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProtoContent::GpuResult, request_id_),
  PROTOBUF_FIELD_OFFSET(::ProtoContent::GpuResult, doc_),
  PROTOBUF_FIELD_OFFSET(::ProtoContent::GpuResult, dnn_version_),
  PROTOBUF_FIELD_OFFSET(::ProtoContent::GpuResult, query_features_),
  0,
  ~0u,
  1,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::ProtoContent::TitleTerms)},
  { 9, 16, sizeof(::ProtoContent::Keywords)},
  { 18, 26, sizeof(::ProtoContent::NewKeywords)},
  { 29, 35, sizeof(::ProtoContent::Summarys)},
  { 36, 52, sizeof(::ProtoContent::GpuRequest)},
  { 63, 70, sizeof(::ProtoContent::FeatureResult)},
  { 72, 79, sizeof(::ProtoContent::QueryFeature)},
  { 81, 92, sizeof(::ProtoContent::GpuResultDoc)},
  { 98, 107, sizeof(::ProtoContent::GpuResult)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ProtoContent::_TitleTerms_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ProtoContent::_Keywords_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ProtoContent::_NewKeywords_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ProtoContent::_Summarys_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ProtoContent::_GpuRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ProtoContent::_FeatureResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ProtoContent::_QueryFeature_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ProtoContent::_GpuResultDoc_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ProtoContent::_GpuResult_default_instance_),
};

const char descriptor_table_protodef_compatible_5fserver_5freq_5fres_2eproto[] =
  "\n\037compatible_server_req_res.proto\022\014Proto"
  "Content\"*\n\nTitleTerms\022\r\n\005docid\030\001 \003(\r\022\r\n\005"
  "words\030\002 \003(\014\",\n\010Keywords\022\017\n\007words_1\030\001 \003(\r"
  "\022\017\n\007words_2\030\002 \003(\r\"\?\n\013NewKeywords\022\r\n\005word"
  "s\030\001 \003(\014\022\022\n\nimportance\030\002 \003(\r\022\r\n\005order\030\003 \003"
  "(\r\"\031\n\010Summarys\022\r\n\005words\030\001 \003(\014\"\314\002\n\nGpuReq"
  "uest\022\022\n\nrequest_id\030\001 \002(\r\022+\n\tdnn_words\030\002 "
  "\003(\0132\030.ProtoContent.TitleTerms\022+\n\tcnn_wor"
  "ds\030\003 \003(\0132\030.ProtoContent.TitleTerms\022\016\n\006ex"
  "p_id\030\004 \003(\014\022\023\n\013run_graphes\030\005 \003(\t\022\014\n\004urls\030"
  "\006 \003(\t\022(\n\010keywords\030\007 \003(\0132\026.ProtoContent.K"
  "eywords\022\014\n\004pc_1\030\010 \003(\004\022\014\n\004pc_2\030\t \003(\004\022.\n\013n"
  "ewkeywords\030\n \003(\0132\031.ProtoContent.NewKeywo"
  "rds\022\'\n\007summary\030\013 \003(\0132\026.ProtoContent.Summ"
  "arys\":\n\rFeatureResult\022\022\n\nfeature_id\030\001 \002("
  "\r\022\025\n\rfeature_score\030\002 \002(\002\"9\n\014QueryFeature"
  "\022\022\n\nfeature_id\030\001 \002(\r\022\025\n\rfeature_score\030\002 "
  "\003(\002\"\224\001\n\014GpuResultDoc\022\r\n\005docid\030\001 \003(\r\022\020\n\010d"
  "nn_5000\030\002 \002(\002\022\020\n\010dnn_5001\030\003 \002(\002\022\020\n\010dnn_5"
  "002\030\004 \002(\002\022\020\n\010dnn_5003\030\005 \002(\002\022-\n\010features\030"
  "\006 \003(\0132\033.ProtoContent.FeatureResult\"\221\001\n\tG"
  "puResult\022\022\n\nrequest_id\030\001 \002(\r\022\'\n\003doc\030\002 \003("
  "\0132\032.ProtoContent.GpuResultDoc\022\023\n\013dnn_ver"
  "sion\030\003 \001(\005\0222\n\016query_features\030\004 \003(\0132\032.Pro"
  "toContent.QueryFeature"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_compatible_5fserver_5freq_5fres_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_compatible_5fserver_5freq_5fres_2eproto_sccs[9] = {
  &scc_info_FeatureResult_compatible_5fserver_5freq_5fres_2eproto.base,
  &scc_info_GpuRequest_compatible_5fserver_5freq_5fres_2eproto.base,
  &scc_info_GpuResult_compatible_5fserver_5freq_5fres_2eproto.base,
  &scc_info_GpuResultDoc_compatible_5fserver_5freq_5fres_2eproto.base,
  &scc_info_Keywords_compatible_5fserver_5freq_5fres_2eproto.base,
  &scc_info_NewKeywords_compatible_5fserver_5freq_5fres_2eproto.base,
  &scc_info_QueryFeature_compatible_5fserver_5freq_5fres_2eproto.base,
  &scc_info_Summarys_compatible_5fserver_5freq_5fres_2eproto.base,
  &scc_info_TitleTerms_compatible_5fserver_5freq_5fres_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_compatible_5fserver_5freq_5fres_2eproto_once;
static bool descriptor_table_compatible_5fserver_5freq_5fres_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_compatible_5fserver_5freq_5fres_2eproto = {
  &descriptor_table_compatible_5fserver_5freq_5fres_2eproto_initialized, descriptor_table_protodef_compatible_5fserver_5freq_5fres_2eproto, "compatible_server_req_res.proto", 982,
  &descriptor_table_compatible_5fserver_5freq_5fres_2eproto_once, descriptor_table_compatible_5fserver_5freq_5fres_2eproto_sccs, descriptor_table_compatible_5fserver_5freq_5fres_2eproto_deps, 9, 0,
  schemas, file_default_instances, TableStruct_compatible_5fserver_5freq_5fres_2eproto::offsets,
  file_level_metadata_compatible_5fserver_5freq_5fres_2eproto, 9, file_level_enum_descriptors_compatible_5fserver_5freq_5fres_2eproto, file_level_service_descriptors_compatible_5fserver_5freq_5fres_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_compatible_5fserver_5freq_5fres_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_compatible_5fserver_5freq_5fres_2eproto), true);
namespace ProtoContent {

// ===================================================================

void TitleTerms::InitAsDefaultInstance() {
}
class TitleTerms::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<TitleTerms>()._has_bits_);
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TitleTerms::kDocidFieldNumber;
const int TitleTerms::kWordsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TitleTerms::TitleTerms()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoContent.TitleTerms)
}
TitleTerms::TitleTerms(const TitleTerms& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      docid_(from.docid_),
      words_(from.words_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ProtoContent.TitleTerms)
}

void TitleTerms::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TitleTerms_compatible_5fserver_5freq_5fres_2eproto.base);
}

TitleTerms::~TitleTerms() {
  // @@protoc_insertion_point(destructor:ProtoContent.TitleTerms)
  SharedDtor();
}

void TitleTerms::SharedDtor() {
}

void TitleTerms::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TitleTerms& TitleTerms::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TitleTerms_compatible_5fserver_5freq_5fres_2eproto.base);
  return *internal_default_instance();
}


void TitleTerms::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoContent.TitleTerms)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  docid_.Clear();
  words_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TitleTerms::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint32 docid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_docid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 8);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(mutable_docid(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes words = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_words(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TitleTerms::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoContent.TitleTerms)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 docid = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8u, input, this->mutable_docid())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_docid())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes words = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->add_words()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoContent.TitleTerms)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoContent.TitleTerms)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TitleTerms::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoContent.TitleTerms)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 docid = 1;
  for (int i = 0, n = this->docid_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(
      1, this->docid(i), output);
  }

  // repeated bytes words = 2;
  for (int i = 0, n = this->words_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytes(
      2, this->words(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoContent.TitleTerms)
}

::PROTOBUF_NAMESPACE_ID::uint8* TitleTerms::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoContent.TitleTerms)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 docid = 1;
  target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
    WriteUInt32ToArray(1, this->docid_, target);

  // repeated bytes words = 2;
  for (int i = 0, n = this->words_size(); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteBytesToArray(2, this->words(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoContent.TitleTerms)
  return target;
}

size_t TitleTerms::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtoContent.TitleTerms)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 docid = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->docid_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->docid_size());
    total_size += data_size;
  }

  // repeated bytes words = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->words_size());
  for (int i = 0, n = this->words_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      this->words(i));
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TitleTerms::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProtoContent.TitleTerms)
  GOOGLE_DCHECK_NE(&from, this);
  const TitleTerms* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TitleTerms>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProtoContent.TitleTerms)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProtoContent.TitleTerms)
    MergeFrom(*source);
  }
}

void TitleTerms::MergeFrom(const TitleTerms& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProtoContent.TitleTerms)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  docid_.MergeFrom(from.docid_);
  words_.MergeFrom(from.words_);
}

void TitleTerms::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProtoContent.TitleTerms)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TitleTerms::CopyFrom(const TitleTerms& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoContent.TitleTerms)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TitleTerms::IsInitialized() const {
  return true;
}

void TitleTerms::Swap(TitleTerms* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TitleTerms::InternalSwap(TitleTerms* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  docid_.InternalSwap(&other->docid_);
  words_.InternalSwap(CastToBase(&other->words_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TitleTerms::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Keywords::InitAsDefaultInstance() {
}
class Keywords::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<Keywords>()._has_bits_);
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Keywords::kWords1FieldNumber;
const int Keywords::kWords2FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Keywords::Keywords()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoContent.Keywords)
}
Keywords::Keywords(const Keywords& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      words_1_(from.words_1_),
      words_2_(from.words_2_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ProtoContent.Keywords)
}

void Keywords::SharedCtor() {
}

Keywords::~Keywords() {
  // @@protoc_insertion_point(destructor:ProtoContent.Keywords)
  SharedDtor();
}

void Keywords::SharedDtor() {
}

void Keywords::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Keywords& Keywords::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Keywords_compatible_5fserver_5freq_5fres_2eproto.base);
  return *internal_default_instance();
}


void Keywords::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoContent.Keywords)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  words_1_.Clear();
  words_2_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Keywords::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint32 words_1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_words_1(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 8);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(mutable_words_1(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 words_2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_words_2(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 16);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(mutable_words_2(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Keywords::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoContent.Keywords)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 words_1 = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8u, input, this->mutable_words_1())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_words_1())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 words_2 = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16u, input, this->mutable_words_2())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_words_2())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoContent.Keywords)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoContent.Keywords)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Keywords::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoContent.Keywords)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 words_1 = 1;
  for (int i = 0, n = this->words_1_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(
      1, this->words_1(i), output);
  }

  // repeated uint32 words_2 = 2;
  for (int i = 0, n = this->words_2_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(
      2, this->words_2(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoContent.Keywords)
}

::PROTOBUF_NAMESPACE_ID::uint8* Keywords::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoContent.Keywords)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 words_1 = 1;
  target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
    WriteUInt32ToArray(1, this->words_1_, target);

  // repeated uint32 words_2 = 2;
  target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
    WriteUInt32ToArray(2, this->words_2_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoContent.Keywords)
  return target;
}

size_t Keywords::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtoContent.Keywords)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 words_1 = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->words_1_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->words_1_size());
    total_size += data_size;
  }

  // repeated uint32 words_2 = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->words_2_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->words_2_size());
    total_size += data_size;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Keywords::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProtoContent.Keywords)
  GOOGLE_DCHECK_NE(&from, this);
  const Keywords* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Keywords>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProtoContent.Keywords)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProtoContent.Keywords)
    MergeFrom(*source);
  }
}

void Keywords::MergeFrom(const Keywords& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProtoContent.Keywords)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  words_1_.MergeFrom(from.words_1_);
  words_2_.MergeFrom(from.words_2_);
}

void Keywords::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProtoContent.Keywords)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Keywords::CopyFrom(const Keywords& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoContent.Keywords)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Keywords::IsInitialized() const {
  return true;
}

void Keywords::Swap(Keywords* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Keywords::InternalSwap(Keywords* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  words_1_.InternalSwap(&other->words_1_);
  words_2_.InternalSwap(&other->words_2_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Keywords::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NewKeywords::InitAsDefaultInstance() {
}
class NewKeywords::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<NewKeywords>()._has_bits_);
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NewKeywords::kWordsFieldNumber;
const int NewKeywords::kImportanceFieldNumber;
const int NewKeywords::kOrderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NewKeywords::NewKeywords()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoContent.NewKeywords)
}
NewKeywords::NewKeywords(const NewKeywords& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      words_(from.words_),
      importance_(from.importance_),
      order_(from.order_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ProtoContent.NewKeywords)
}

void NewKeywords::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NewKeywords_compatible_5fserver_5freq_5fres_2eproto.base);
}

NewKeywords::~NewKeywords() {
  // @@protoc_insertion_point(destructor:ProtoContent.NewKeywords)
  SharedDtor();
}

void NewKeywords::SharedDtor() {
}

void NewKeywords::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NewKeywords& NewKeywords::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NewKeywords_compatible_5fserver_5freq_5fres_2eproto.base);
  return *internal_default_instance();
}


void NewKeywords::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoContent.NewKeywords)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  words_.Clear();
  importance_.Clear();
  order_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NewKeywords::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated bytes words = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_words(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // repeated uint32 importance = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_importance(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 16);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(mutable_importance(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 order = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_order(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 24);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(mutable_order(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NewKeywords::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoContent.NewKeywords)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes words = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->add_words()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 importance = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16u, input, this->mutable_importance())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_importance())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 order = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24u, input, this->mutable_order())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_order())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoContent.NewKeywords)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoContent.NewKeywords)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NewKeywords::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoContent.NewKeywords)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes words = 1;
  for (int i = 0, n = this->words_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytes(
      1, this->words(i), output);
  }

  // repeated uint32 importance = 2;
  for (int i = 0, n = this->importance_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(
      2, this->importance(i), output);
  }

  // repeated uint32 order = 3;
  for (int i = 0, n = this->order_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(
      3, this->order(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoContent.NewKeywords)
}

::PROTOBUF_NAMESPACE_ID::uint8* NewKeywords::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoContent.NewKeywords)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes words = 1;
  for (int i = 0, n = this->words_size(); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteBytesToArray(1, this->words(i), target);
  }

  // repeated uint32 importance = 2;
  target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
    WriteUInt32ToArray(2, this->importance_, target);

  // repeated uint32 order = 3;
  target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
    WriteUInt32ToArray(3, this->order_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoContent.NewKeywords)
  return target;
}

size_t NewKeywords::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtoContent.NewKeywords)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes words = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->words_size());
  for (int i = 0, n = this->words_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      this->words(i));
  }

  // repeated uint32 importance = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->importance_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->importance_size());
    total_size += data_size;
  }

  // repeated uint32 order = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->order_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->order_size());
    total_size += data_size;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NewKeywords::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProtoContent.NewKeywords)
  GOOGLE_DCHECK_NE(&from, this);
  const NewKeywords* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NewKeywords>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProtoContent.NewKeywords)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProtoContent.NewKeywords)
    MergeFrom(*source);
  }
}

void NewKeywords::MergeFrom(const NewKeywords& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProtoContent.NewKeywords)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  words_.MergeFrom(from.words_);
  importance_.MergeFrom(from.importance_);
  order_.MergeFrom(from.order_);
}

void NewKeywords::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProtoContent.NewKeywords)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewKeywords::CopyFrom(const NewKeywords& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoContent.NewKeywords)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewKeywords::IsInitialized() const {
  return true;
}

void NewKeywords::Swap(NewKeywords* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NewKeywords::InternalSwap(NewKeywords* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  words_.InternalSwap(CastToBase(&other->words_));
  importance_.InternalSwap(&other->importance_);
  order_.InternalSwap(&other->order_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NewKeywords::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Summarys::InitAsDefaultInstance() {
}
class Summarys::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<Summarys>()._has_bits_);
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Summarys::kWordsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Summarys::Summarys()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoContent.Summarys)
}
Summarys::Summarys(const Summarys& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      words_(from.words_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ProtoContent.Summarys)
}

void Summarys::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Summarys_compatible_5fserver_5freq_5fres_2eproto.base);
}

Summarys::~Summarys() {
  // @@protoc_insertion_point(destructor:ProtoContent.Summarys)
  SharedDtor();
}

void Summarys::SharedDtor() {
}

void Summarys::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Summarys& Summarys::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Summarys_compatible_5fserver_5freq_5fres_2eproto.base);
  return *internal_default_instance();
}


void Summarys::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoContent.Summarys)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  words_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Summarys::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated bytes words = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_words(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Summarys::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoContent.Summarys)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes words = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->add_words()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoContent.Summarys)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoContent.Summarys)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Summarys::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoContent.Summarys)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes words = 1;
  for (int i = 0, n = this->words_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytes(
      1, this->words(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoContent.Summarys)
}

::PROTOBUF_NAMESPACE_ID::uint8* Summarys::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoContent.Summarys)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes words = 1;
  for (int i = 0, n = this->words_size(); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteBytesToArray(1, this->words(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoContent.Summarys)
  return target;
}

size_t Summarys::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtoContent.Summarys)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes words = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->words_size());
  for (int i = 0, n = this->words_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      this->words(i));
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Summarys::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProtoContent.Summarys)
  GOOGLE_DCHECK_NE(&from, this);
  const Summarys* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Summarys>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProtoContent.Summarys)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProtoContent.Summarys)
    MergeFrom(*source);
  }
}

void Summarys::MergeFrom(const Summarys& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProtoContent.Summarys)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  words_.MergeFrom(from.words_);
}

void Summarys::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProtoContent.Summarys)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Summarys::CopyFrom(const Summarys& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoContent.Summarys)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Summarys::IsInitialized() const {
  return true;
}

void Summarys::Swap(Summarys* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Summarys::InternalSwap(Summarys* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  words_.InternalSwap(CastToBase(&other->words_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Summarys::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GpuRequest::InitAsDefaultInstance() {
}
class GpuRequest::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<GpuRequest>()._has_bits_);
  static void set_has_request_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GpuRequest::kRequestIdFieldNumber;
const int GpuRequest::kDnnWordsFieldNumber;
const int GpuRequest::kCnnWordsFieldNumber;
const int GpuRequest::kExpIdFieldNumber;
const int GpuRequest::kRunGraphesFieldNumber;
const int GpuRequest::kUrlsFieldNumber;
const int GpuRequest::kKeywordsFieldNumber;
const int GpuRequest::kPc1FieldNumber;
const int GpuRequest::kPc2FieldNumber;
const int GpuRequest::kNewkeywordsFieldNumber;
const int GpuRequest::kSummaryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GpuRequest::GpuRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoContent.GpuRequest)
}
GpuRequest::GpuRequest(const GpuRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      dnn_words_(from.dnn_words_),
      cnn_words_(from.cnn_words_),
      exp_id_(from.exp_id_),
      run_graphes_(from.run_graphes_),
      urls_(from.urls_),
      keywords_(from.keywords_),
      pc_1_(from.pc_1_),
      pc_2_(from.pc_2_),
      newkeywords_(from.newkeywords_),
      summary_(from.summary_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  request_id_ = from.request_id_;
  // @@protoc_insertion_point(copy_constructor:ProtoContent.GpuRequest)
}

void GpuRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GpuRequest_compatible_5fserver_5freq_5fres_2eproto.base);
  request_id_ = 0u;
}

GpuRequest::~GpuRequest() {
  // @@protoc_insertion_point(destructor:ProtoContent.GpuRequest)
  SharedDtor();
}

void GpuRequest::SharedDtor() {
}

void GpuRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GpuRequest& GpuRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GpuRequest_compatible_5fserver_5freq_5fres_2eproto.base);
  return *internal_default_instance();
}


void GpuRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoContent.GpuRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dnn_words_.Clear();
  cnn_words_.Clear();
  exp_id_.Clear();
  run_graphes_.Clear();
  urls_.Clear();
  keywords_.Clear();
  pc_1_.Clear();
  pc_2_.Clear();
  newkeywords_.Clear();
  summary_.Clear();
  request_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GpuRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          HasBitSetters::set_has_request_id(&has_bits);
          request_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ProtoContent.TitleTerms dnn_words = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_dnn_words(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // repeated .ProtoContent.TitleTerms cnn_words = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_cnn_words(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      // repeated bytes exp_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_exp_id(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      // repeated string run_graphes = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(add_run_graphes(), ptr, ctx, "ProtoContent.GpuRequest.run_graphes");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 42);
        } else goto handle_unusual;
        continue;
      // repeated string urls = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(add_urls(), ptr, ctx, "ProtoContent.GpuRequest.urls");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 50);
        } else goto handle_unusual;
        continue;
      // repeated .ProtoContent.Keywords keywords = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_keywords(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 58);
        } else goto handle_unusual;
        continue;
      // repeated uint64 pc_1 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_pc_1(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 64);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(mutable_pc_1(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 pc_2 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_pc_2(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 72);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(mutable_pc_2(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ProtoContent.NewKeywords newkeywords = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_newkeywords(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 82);
        } else goto handle_unusual;
        continue;
      // repeated .ProtoContent.Summarys summary = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_summary(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 90);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GpuRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoContent.GpuRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 request_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_request_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &request_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ProtoContent.TitleTerms dnn_words = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_dnn_words()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ProtoContent.TitleTerms cnn_words = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_cnn_words()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes exp_id = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->add_exp_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string run_graphes = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_run_graphes()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->run_graphes(this->run_graphes_size() - 1).data(),
            static_cast<int>(this->run_graphes(this->run_graphes_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "ProtoContent.GpuRequest.run_graphes");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string urls = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_urls()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->urls(this->urls_size() - 1).data(),
            static_cast<int>(this->urls(this->urls_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "ProtoContent.GpuRequest.urls");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ProtoContent.Keywords keywords = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_keywords()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 pc_1 = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 1, 64u, input, this->mutable_pc_1())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_pc_1())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 pc_2 = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 1, 72u, input, this->mutable_pc_2())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_pc_2())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ProtoContent.NewKeywords newkeywords = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_newkeywords()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ProtoContent.Summarys summary = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_summary()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoContent.GpuRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoContent.GpuRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GpuRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoContent.GpuRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 request_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->request_id(), output);
  }

  // repeated .ProtoContent.TitleTerms dnn_words = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->dnn_words_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->dnn_words(static_cast<int>(i)),
      output);
  }

  // repeated .ProtoContent.TitleTerms cnn_words = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cnn_words_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->cnn_words(static_cast<int>(i)),
      output);
  }

  // repeated bytes exp_id = 4;
  for (int i = 0, n = this->exp_id_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytes(
      4, this->exp_id(i), output);
  }

  // repeated string run_graphes = 5;
  for (int i = 0, n = this->run_graphes_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->run_graphes(i).data(), static_cast<int>(this->run_graphes(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ProtoContent.GpuRequest.run_graphes");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      5, this->run_graphes(i), output);
  }

  // repeated string urls = 6;
  for (int i = 0, n = this->urls_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->urls(i).data(), static_cast<int>(this->urls(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ProtoContent.GpuRequest.urls");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      6, this->urls(i), output);
  }

  // repeated .ProtoContent.Keywords keywords = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->keywords_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->keywords(static_cast<int>(i)),
      output);
  }

  // repeated uint64 pc_1 = 8;
  for (int i = 0, n = this->pc_1_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(
      8, this->pc_1(i), output);
  }

  // repeated uint64 pc_2 = 9;
  for (int i = 0, n = this->pc_2_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(
      9, this->pc_2(i), output);
  }

  // repeated .ProtoContent.NewKeywords newkeywords = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->newkeywords_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      10,
      this->newkeywords(static_cast<int>(i)),
      output);
  }

  // repeated .ProtoContent.Summarys summary = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->summary_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      11,
      this->summary(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoContent.GpuRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* GpuRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoContent.GpuRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 request_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->request_id(), target);
  }

  // repeated .ProtoContent.TitleTerms dnn_words = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->dnn_words_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->dnn_words(static_cast<int>(i)), target);
  }

  // repeated .ProtoContent.TitleTerms cnn_words = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cnn_words_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->cnn_words(static_cast<int>(i)), target);
  }

  // repeated bytes exp_id = 4;
  for (int i = 0, n = this->exp_id_size(); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteBytesToArray(4, this->exp_id(i), target);
  }

  // repeated string run_graphes = 5;
  for (int i = 0, n = this->run_graphes_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->run_graphes(i).data(), static_cast<int>(this->run_graphes(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ProtoContent.GpuRequest.run_graphes");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(5, this->run_graphes(i), target);
  }

  // repeated string urls = 6;
  for (int i = 0, n = this->urls_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->urls(i).data(), static_cast<int>(this->urls(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ProtoContent.GpuRequest.urls");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(6, this->urls(i), target);
  }

  // repeated .ProtoContent.Keywords keywords = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->keywords_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->keywords(static_cast<int>(i)), target);
  }

  // repeated uint64 pc_1 = 8;
  target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
    WriteUInt64ToArray(8, this->pc_1_, target);

  // repeated uint64 pc_2 = 9;
  target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
    WriteUInt64ToArray(9, this->pc_2_, target);

  // repeated .ProtoContent.NewKeywords newkeywords = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->newkeywords_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->newkeywords(static_cast<int>(i)), target);
  }

  // repeated .ProtoContent.Summarys summary = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->summary_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->summary(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoContent.GpuRequest)
  return target;
}

size_t GpuRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtoContent.GpuRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint32 request_id = 1;
  if (has_request_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->request_id());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ProtoContent.TitleTerms dnn_words = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->dnn_words_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->dnn_words(static_cast<int>(i)));
    }
  }

  // repeated .ProtoContent.TitleTerms cnn_words = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->cnn_words_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->cnn_words(static_cast<int>(i)));
    }
  }

  // repeated bytes exp_id = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->exp_id_size());
  for (int i = 0, n = this->exp_id_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      this->exp_id(i));
  }

  // repeated string run_graphes = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->run_graphes_size());
  for (int i = 0, n = this->run_graphes_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->run_graphes(i));
  }

  // repeated string urls = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->urls_size());
  for (int i = 0, n = this->urls_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->urls(i));
  }

  // repeated .ProtoContent.Keywords keywords = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->keywords_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->keywords(static_cast<int>(i)));
    }
  }

  // repeated uint64 pc_1 = 8;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->pc_1_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->pc_1_size());
    total_size += data_size;
  }

  // repeated uint64 pc_2 = 9;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->pc_2_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->pc_2_size());
    total_size += data_size;
  }

  // repeated .ProtoContent.NewKeywords newkeywords = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->newkeywords_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->newkeywords(static_cast<int>(i)));
    }
  }

  // repeated .ProtoContent.Summarys summary = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->summary_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->summary(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GpuRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProtoContent.GpuRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GpuRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GpuRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProtoContent.GpuRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProtoContent.GpuRequest)
    MergeFrom(*source);
  }
}

void GpuRequest::MergeFrom(const GpuRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProtoContent.GpuRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dnn_words_.MergeFrom(from.dnn_words_);
  cnn_words_.MergeFrom(from.cnn_words_);
  exp_id_.MergeFrom(from.exp_id_);
  run_graphes_.MergeFrom(from.run_graphes_);
  urls_.MergeFrom(from.urls_);
  keywords_.MergeFrom(from.keywords_);
  pc_1_.MergeFrom(from.pc_1_);
  pc_2_.MergeFrom(from.pc_2_);
  newkeywords_.MergeFrom(from.newkeywords_);
  summary_.MergeFrom(from.summary_);
  if (from.has_request_id()) {
    set_request_id(from.request_id());
  }
}

void GpuRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProtoContent.GpuRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GpuRequest::CopyFrom(const GpuRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoContent.GpuRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GpuRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void GpuRequest::Swap(GpuRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GpuRequest::InternalSwap(GpuRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&dnn_words_)->InternalSwap(CastToBase(&other->dnn_words_));
  CastToBase(&cnn_words_)->InternalSwap(CastToBase(&other->cnn_words_));
  exp_id_.InternalSwap(CastToBase(&other->exp_id_));
  run_graphes_.InternalSwap(CastToBase(&other->run_graphes_));
  urls_.InternalSwap(CastToBase(&other->urls_));
  CastToBase(&keywords_)->InternalSwap(CastToBase(&other->keywords_));
  pc_1_.InternalSwap(&other->pc_1_);
  pc_2_.InternalSwap(&other->pc_2_);
  CastToBase(&newkeywords_)->InternalSwap(CastToBase(&other->newkeywords_));
  CastToBase(&summary_)->InternalSwap(CastToBase(&other->summary_));
  swap(request_id_, other->request_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GpuRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FeatureResult::InitAsDefaultInstance() {
}
class FeatureResult::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<FeatureResult>()._has_bits_);
  static void set_has_feature_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_feature_score(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FeatureResult::kFeatureIdFieldNumber;
const int FeatureResult::kFeatureScoreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FeatureResult::FeatureResult()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoContent.FeatureResult)
}
FeatureResult::FeatureResult(const FeatureResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&feature_id_, &from.feature_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&feature_score_) -
    reinterpret_cast<char*>(&feature_id_)) + sizeof(feature_score_));
  // @@protoc_insertion_point(copy_constructor:ProtoContent.FeatureResult)
}

void FeatureResult::SharedCtor() {
  ::memset(&feature_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&feature_score_) -
      reinterpret_cast<char*>(&feature_id_)) + sizeof(feature_score_));
}

FeatureResult::~FeatureResult() {
  // @@protoc_insertion_point(destructor:ProtoContent.FeatureResult)
  SharedDtor();
}

void FeatureResult::SharedDtor() {
}

void FeatureResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FeatureResult& FeatureResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FeatureResult_compatible_5fserver_5freq_5fres_2eproto.base);
  return *internal_default_instance();
}


void FeatureResult::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoContent.FeatureResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&feature_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&feature_score_) -
        reinterpret_cast<char*>(&feature_id_)) + sizeof(feature_score_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FeatureResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 feature_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          HasBitSetters::set_has_feature_id(&has_bits);
          feature_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required float feature_score = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          HasBitSetters::set_has_feature_score(&has_bits);
          feature_score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FeatureResult::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoContent.FeatureResult)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 feature_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_feature_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &feature_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float feature_score = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          HasBitSetters::set_has_feature_score(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &feature_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoContent.FeatureResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoContent.FeatureResult)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FeatureResult::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoContent.FeatureResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 feature_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->feature_id(), output);
  }

  // required float feature_score = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->feature_score(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoContent.FeatureResult)
}

::PROTOBUF_NAMESPACE_ID::uint8* FeatureResult::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoContent.FeatureResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 feature_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->feature_id(), target);
  }

  // required float feature_score = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->feature_score(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoContent.FeatureResult)
  return target;
}

size_t FeatureResult::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ProtoContent.FeatureResult)
  size_t total_size = 0;

  if (has_feature_id()) {
    // required uint32 feature_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->feature_id());
  }

  if (has_feature_score()) {
    // required float feature_score = 2;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t FeatureResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtoContent.FeatureResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 feature_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->feature_id());

    // required float feature_score = 2;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FeatureResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProtoContent.FeatureResult)
  GOOGLE_DCHECK_NE(&from, this);
  const FeatureResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FeatureResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProtoContent.FeatureResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProtoContent.FeatureResult)
    MergeFrom(*source);
  }
}

void FeatureResult::MergeFrom(const FeatureResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProtoContent.FeatureResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      feature_id_ = from.feature_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      feature_score_ = from.feature_score_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FeatureResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProtoContent.FeatureResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FeatureResult::CopyFrom(const FeatureResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoContent.FeatureResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeatureResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void FeatureResult::Swap(FeatureResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FeatureResult::InternalSwap(FeatureResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(feature_id_, other->feature_id_);
  swap(feature_score_, other->feature_score_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FeatureResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void QueryFeature::InitAsDefaultInstance() {
}
class QueryFeature::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<QueryFeature>()._has_bits_);
  static void set_has_feature_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QueryFeature::kFeatureIdFieldNumber;
const int QueryFeature::kFeatureScoreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QueryFeature::QueryFeature()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoContent.QueryFeature)
}
QueryFeature::QueryFeature(const QueryFeature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      feature_score_(from.feature_score_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  feature_id_ = from.feature_id_;
  // @@protoc_insertion_point(copy_constructor:ProtoContent.QueryFeature)
}

void QueryFeature::SharedCtor() {
  feature_id_ = 0u;
}

QueryFeature::~QueryFeature() {
  // @@protoc_insertion_point(destructor:ProtoContent.QueryFeature)
  SharedDtor();
}

void QueryFeature::SharedDtor() {
}

void QueryFeature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QueryFeature& QueryFeature::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_QueryFeature_compatible_5fserver_5freq_5fres_2eproto.base);
  return *internal_default_instance();
}


void QueryFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoContent.QueryFeature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  feature_score_.Clear();
  feature_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* QueryFeature::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 feature_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          HasBitSetters::set_has_feature_id(&has_bits);
          feature_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float feature_score = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_feature_score(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 21);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_feature_score(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool QueryFeature::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoContent.QueryFeature)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 feature_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_feature_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &feature_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float feature_score = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 21u, input, this->mutable_feature_score())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_feature_score())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoContent.QueryFeature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoContent.QueryFeature)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void QueryFeature::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoContent.QueryFeature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 feature_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->feature_id(), output);
  }

  // repeated float feature_score = 2;
  for (int i = 0, n = this->feature_score_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(
      2, this->feature_score(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoContent.QueryFeature)
}

::PROTOBUF_NAMESPACE_ID::uint8* QueryFeature::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoContent.QueryFeature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 feature_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->feature_id(), target);
  }

  // repeated float feature_score = 2;
  target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
    WriteFloatToArray(2, this->feature_score_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoContent.QueryFeature)
  return target;
}

size_t QueryFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtoContent.QueryFeature)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint32 feature_id = 1;
  if (has_feature_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->feature_id());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float feature_score = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->feature_score_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->feature_score_size());
    total_size += data_size;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QueryFeature::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProtoContent.QueryFeature)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryFeature* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QueryFeature>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProtoContent.QueryFeature)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProtoContent.QueryFeature)
    MergeFrom(*source);
  }
}

void QueryFeature::MergeFrom(const QueryFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProtoContent.QueryFeature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  feature_score_.MergeFrom(from.feature_score_);
  if (from.has_feature_id()) {
    set_feature_id(from.feature_id());
  }
}

void QueryFeature::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProtoContent.QueryFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryFeature::CopyFrom(const QueryFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoContent.QueryFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryFeature::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void QueryFeature::Swap(QueryFeature* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QueryFeature::InternalSwap(QueryFeature* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  feature_score_.InternalSwap(&other->feature_score_);
  swap(feature_id_, other->feature_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryFeature::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GpuResultDoc::InitAsDefaultInstance() {
}
class GpuResultDoc::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<GpuResultDoc>()._has_bits_);
  static void set_has_dnn_5000(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_dnn_5001(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_dnn_5002(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_dnn_5003(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GpuResultDoc::kDocidFieldNumber;
const int GpuResultDoc::kDnn5000FieldNumber;
const int GpuResultDoc::kDnn5001FieldNumber;
const int GpuResultDoc::kDnn5002FieldNumber;
const int GpuResultDoc::kDnn5003FieldNumber;
const int GpuResultDoc::kFeaturesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GpuResultDoc::GpuResultDoc()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoContent.GpuResultDoc)
}
GpuResultDoc::GpuResultDoc(const GpuResultDoc& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      docid_(from.docid_),
      features_(from.features_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&dnn_5000_, &from.dnn_5000_,
    static_cast<size_t>(reinterpret_cast<char*>(&dnn_5003_) -
    reinterpret_cast<char*>(&dnn_5000_)) + sizeof(dnn_5003_));
  // @@protoc_insertion_point(copy_constructor:ProtoContent.GpuResultDoc)
}

void GpuResultDoc::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GpuResultDoc_compatible_5fserver_5freq_5fres_2eproto.base);
  ::memset(&dnn_5000_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dnn_5003_) -
      reinterpret_cast<char*>(&dnn_5000_)) + sizeof(dnn_5003_));
}

GpuResultDoc::~GpuResultDoc() {
  // @@protoc_insertion_point(destructor:ProtoContent.GpuResultDoc)
  SharedDtor();
}

void GpuResultDoc::SharedDtor() {
}

void GpuResultDoc::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GpuResultDoc& GpuResultDoc::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GpuResultDoc_compatible_5fserver_5freq_5fres_2eproto.base);
  return *internal_default_instance();
}


void GpuResultDoc::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoContent.GpuResultDoc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  docid_.Clear();
  features_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&dnn_5000_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dnn_5003_) -
        reinterpret_cast<char*>(&dnn_5000_)) + sizeof(dnn_5003_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GpuResultDoc::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint32 docid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_docid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 8);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(mutable_docid(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required float dnn_5000 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          HasBitSetters::set_has_dnn_5000(&has_bits);
          dnn_5000_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float dnn_5001 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          HasBitSetters::set_has_dnn_5001(&has_bits);
          dnn_5001_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float dnn_5002 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          HasBitSetters::set_has_dnn_5002(&has_bits);
          dnn_5002_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float dnn_5003 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          HasBitSetters::set_has_dnn_5003(&has_bits);
          dnn_5003_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated .ProtoContent.FeatureResult features = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_features(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 50);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GpuResultDoc::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoContent.GpuResultDoc)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 docid = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8u, input, this->mutable_docid())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_docid())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float dnn_5000 = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          HasBitSetters::set_has_dnn_5000(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dnn_5000_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float dnn_5001 = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {
          HasBitSetters::set_has_dnn_5001(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dnn_5001_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float dnn_5002 = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {
          HasBitSetters::set_has_dnn_5002(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dnn_5002_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float dnn_5003 = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (45 & 0xFF)) {
          HasBitSetters::set_has_dnn_5003(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dnn_5003_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ProtoContent.FeatureResult features = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_features()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoContent.GpuResultDoc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoContent.GpuResultDoc)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GpuResultDoc::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoContent.GpuResultDoc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 docid = 1;
  for (int i = 0, n = this->docid_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(
      1, this->docid(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // required float dnn_5000 = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->dnn_5000(), output);
  }

  // required float dnn_5001 = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->dnn_5001(), output);
  }

  // required float dnn_5002 = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(4, this->dnn_5002(), output);
  }

  // required float dnn_5003 = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(5, this->dnn_5003(), output);
  }

  // repeated .ProtoContent.FeatureResult features = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->features_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->features(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoContent.GpuResultDoc)
}

::PROTOBUF_NAMESPACE_ID::uint8* GpuResultDoc::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoContent.GpuResultDoc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 docid = 1;
  target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
    WriteUInt32ToArray(1, this->docid_, target);

  cached_has_bits = _has_bits_[0];
  // required float dnn_5000 = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->dnn_5000(), target);
  }

  // required float dnn_5001 = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->dnn_5001(), target);
  }

  // required float dnn_5002 = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->dnn_5002(), target);
  }

  // required float dnn_5003 = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->dnn_5003(), target);
  }

  // repeated .ProtoContent.FeatureResult features = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->features_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->features(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoContent.GpuResultDoc)
  return target;
}

size_t GpuResultDoc::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ProtoContent.GpuResultDoc)
  size_t total_size = 0;

  if (has_dnn_5000()) {
    // required float dnn_5000 = 2;
    total_size += 1 + 4;
  }

  if (has_dnn_5001()) {
    // required float dnn_5001 = 3;
    total_size += 1 + 4;
  }

  if (has_dnn_5002()) {
    // required float dnn_5002 = 4;
    total_size += 1 + 4;
  }

  if (has_dnn_5003()) {
    // required float dnn_5003 = 5;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t GpuResultDoc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtoContent.GpuResultDoc)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required float dnn_5000 = 2;
    total_size += 1 + 4;

    // required float dnn_5001 = 3;
    total_size += 1 + 4;

    // required float dnn_5002 = 4;
    total_size += 1 + 4;

    // required float dnn_5003 = 5;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 docid = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->docid_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->docid_size());
    total_size += data_size;
  }

  // repeated .ProtoContent.FeatureResult features = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->features_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->features(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GpuResultDoc::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProtoContent.GpuResultDoc)
  GOOGLE_DCHECK_NE(&from, this);
  const GpuResultDoc* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GpuResultDoc>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProtoContent.GpuResultDoc)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProtoContent.GpuResultDoc)
    MergeFrom(*source);
  }
}

void GpuResultDoc::MergeFrom(const GpuResultDoc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProtoContent.GpuResultDoc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  docid_.MergeFrom(from.docid_);
  features_.MergeFrom(from.features_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      dnn_5000_ = from.dnn_5000_;
    }
    if (cached_has_bits & 0x00000002u) {
      dnn_5001_ = from.dnn_5001_;
    }
    if (cached_has_bits & 0x00000004u) {
      dnn_5002_ = from.dnn_5002_;
    }
    if (cached_has_bits & 0x00000008u) {
      dnn_5003_ = from.dnn_5003_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GpuResultDoc::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProtoContent.GpuResultDoc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GpuResultDoc::CopyFrom(const GpuResultDoc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoContent.GpuResultDoc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GpuResultDoc::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->features())) return false;
  return true;
}

void GpuResultDoc::Swap(GpuResultDoc* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GpuResultDoc::InternalSwap(GpuResultDoc* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  docid_.InternalSwap(&other->docid_);
  CastToBase(&features_)->InternalSwap(CastToBase(&other->features_));
  swap(dnn_5000_, other->dnn_5000_);
  swap(dnn_5001_, other->dnn_5001_);
  swap(dnn_5002_, other->dnn_5002_);
  swap(dnn_5003_, other->dnn_5003_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GpuResultDoc::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GpuResult::InitAsDefaultInstance() {
}
class GpuResult::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<GpuResult>()._has_bits_);
  static void set_has_request_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_dnn_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GpuResult::kRequestIdFieldNumber;
const int GpuResult::kDocFieldNumber;
const int GpuResult::kDnnVersionFieldNumber;
const int GpuResult::kQueryFeaturesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GpuResult::GpuResult()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoContent.GpuResult)
}
GpuResult::GpuResult(const GpuResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      doc_(from.doc_),
      query_features_(from.query_features_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&request_id_, &from.request_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&dnn_version_) -
    reinterpret_cast<char*>(&request_id_)) + sizeof(dnn_version_));
  // @@protoc_insertion_point(copy_constructor:ProtoContent.GpuResult)
}

void GpuResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GpuResult_compatible_5fserver_5freq_5fres_2eproto.base);
  ::memset(&request_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dnn_version_) -
      reinterpret_cast<char*>(&request_id_)) + sizeof(dnn_version_));
}

GpuResult::~GpuResult() {
  // @@protoc_insertion_point(destructor:ProtoContent.GpuResult)
  SharedDtor();
}

void GpuResult::SharedDtor() {
}

void GpuResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GpuResult& GpuResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GpuResult_compatible_5fserver_5freq_5fres_2eproto.base);
  return *internal_default_instance();
}


void GpuResult::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoContent.GpuResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  doc_.Clear();
  query_features_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&request_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dnn_version_) -
        reinterpret_cast<char*>(&request_id_)) + sizeof(dnn_version_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GpuResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          HasBitSetters::set_has_request_id(&has_bits);
          request_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ProtoContent.GpuResultDoc doc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_doc(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // optional int32 dnn_version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          HasBitSetters::set_has_dnn_version(&has_bits);
          dnn_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ProtoContent.QueryFeature query_features = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_query_features(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GpuResult::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoContent.GpuResult)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 request_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_request_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &request_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ProtoContent.GpuResultDoc doc = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_doc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 dnn_version = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_dnn_version(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &dnn_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ProtoContent.QueryFeature query_features = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_query_features()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoContent.GpuResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoContent.GpuResult)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GpuResult::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoContent.GpuResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 request_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->request_id(), output);
  }

  // repeated .ProtoContent.GpuResultDoc doc = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->doc_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->doc(static_cast<int>(i)),
      output);
  }

  // optional int32 dnn_version = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->dnn_version(), output);
  }

  // repeated .ProtoContent.QueryFeature query_features = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->query_features_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->query_features(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoContent.GpuResult)
}

::PROTOBUF_NAMESPACE_ID::uint8* GpuResult::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoContent.GpuResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 request_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->request_id(), target);
  }

  // repeated .ProtoContent.GpuResultDoc doc = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->doc_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->doc(static_cast<int>(i)), target);
  }

  // optional int32 dnn_version = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->dnn_version(), target);
  }

  // repeated .ProtoContent.QueryFeature query_features = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->query_features_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->query_features(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoContent.GpuResult)
  return target;
}

size_t GpuResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtoContent.GpuResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint32 request_id = 1;
  if (has_request_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->request_id());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ProtoContent.GpuResultDoc doc = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->doc_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->doc(static_cast<int>(i)));
    }
  }

  // repeated .ProtoContent.QueryFeature query_features = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->query_features_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->query_features(static_cast<int>(i)));
    }
  }

  // optional int32 dnn_version = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->dnn_version());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GpuResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProtoContent.GpuResult)
  GOOGLE_DCHECK_NE(&from, this);
  const GpuResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GpuResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProtoContent.GpuResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProtoContent.GpuResult)
    MergeFrom(*source);
  }
}

void GpuResult::MergeFrom(const GpuResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProtoContent.GpuResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  doc_.MergeFrom(from.doc_);
  query_features_.MergeFrom(from.query_features_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      request_id_ = from.request_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      dnn_version_ = from.dnn_version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GpuResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProtoContent.GpuResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GpuResult::CopyFrom(const GpuResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoContent.GpuResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GpuResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->doc())) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->query_features())) return false;
  return true;
}

void GpuResult::Swap(GpuResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GpuResult::InternalSwap(GpuResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&doc_)->InternalSwap(CastToBase(&other->doc_));
  CastToBase(&query_features_)->InternalSwap(CastToBase(&other->query_features_));
  swap(request_id_, other->request_id_);
  swap(dnn_version_, other->dnn_version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GpuResult::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace ProtoContent
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ProtoContent::TitleTerms* Arena::CreateMaybeMessage< ::ProtoContent::TitleTerms >(Arena* arena) {
  return Arena::CreateInternal< ::ProtoContent::TitleTerms >(arena);
}
template<> PROTOBUF_NOINLINE ::ProtoContent::Keywords* Arena::CreateMaybeMessage< ::ProtoContent::Keywords >(Arena* arena) {
  return Arena::CreateInternal< ::ProtoContent::Keywords >(arena);
}
template<> PROTOBUF_NOINLINE ::ProtoContent::NewKeywords* Arena::CreateMaybeMessage< ::ProtoContent::NewKeywords >(Arena* arena) {
  return Arena::CreateInternal< ::ProtoContent::NewKeywords >(arena);
}
template<> PROTOBUF_NOINLINE ::ProtoContent::Summarys* Arena::CreateMaybeMessage< ::ProtoContent::Summarys >(Arena* arena) {
  return Arena::CreateInternal< ::ProtoContent::Summarys >(arena);
}
template<> PROTOBUF_NOINLINE ::ProtoContent::GpuRequest* Arena::CreateMaybeMessage< ::ProtoContent::GpuRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ProtoContent::GpuRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ProtoContent::FeatureResult* Arena::CreateMaybeMessage< ::ProtoContent::FeatureResult >(Arena* arena) {
  return Arena::CreateInternal< ::ProtoContent::FeatureResult >(arena);
}
template<> PROTOBUF_NOINLINE ::ProtoContent::QueryFeature* Arena::CreateMaybeMessage< ::ProtoContent::QueryFeature >(Arena* arena) {
  return Arena::CreateInternal< ::ProtoContent::QueryFeature >(arena);
}
template<> PROTOBUF_NOINLINE ::ProtoContent::GpuResultDoc* Arena::CreateMaybeMessage< ::ProtoContent::GpuResultDoc >(Arena* arena) {
  return Arena::CreateInternal< ::ProtoContent::GpuResultDoc >(arena);
}
template<> PROTOBUF_NOINLINE ::ProtoContent::GpuResult* Arena::CreateMaybeMessage< ::ProtoContent::GpuResult >(Arena* arena) {
  return Arena::CreateInternal< ::ProtoContent::GpuResult >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
